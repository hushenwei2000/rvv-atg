import os
finf_and_nan   = ['0x7F800000', '0xFF800000', '0x7FC00001', '0xFFC00001', '0x7FC55555', '0xFFC55555', '0x7F800001', '0xFF800001', '0x7FAAAAAA', '0xFFAAAAAA', '0x7FC00000', '0xFFC00000']

dinf_and_nan   = ['0x7FF0000000000000', '0xFFF0000000000000', '0x7FF8000000000000', '0xFFF8000000000000', '0x7FF8000000000001', '0xFFF8000000000001', '0x7FFC000000000001', '0xFFFC000000000001', '0x7FF0000000000001', '0xFFF0000000000001', '0x7FF4AAAAAAAAAAAA', '0xFFF4AAAAAAAAAAAA', '0x3FF0000000000000', '0xBF80000000000000']

rs1_val = ["0x7F800000", "0x00000000", "0xBF800000", "0xBF800000", "0xBF800000", "0xBF800000", "0xBF800000", "0xBF800000", "0xBF800000", "0xBF800000", "0xBF800000", "0xBF800000", "0xBF800000", "0xBF800000", "0xBF800000", "0xBF800000", "0xBF800000", "0xBF800000", "0x3F800000", "0x3F800000", "0x3F800000", "0x3F800000", "0x3F800000", "0x3F800000", "0x3F800000", "0x3F800000", "0x3F800000", "0x3F800000", "0x3F800000", "0x3F800000", "0x3F800000", "0x3F800000", "0x3F800000", "0x3F800000", "0xFF7FFFFF", "0xFF7FFFFF", "0xFF7FFFFF", "0xFF7FFFFF", "0xFF7FFFFF", "0xFF7FFFFF", "0xFF7FFFFF", "0xFF7FFFFF", "0xFF7FFFFF", "0xFF7FFFFF", "0xFF7FFFFF", "0xFF7FFFFF", "0xFF7FFFFF", "0xFF7FFFFF", "0xFF7FFFFF", "0xFF7FFFFF", "0x7F7FFFFF", "0x7F7FFFFF", "0x7F7FFFFF", "0x7F7FFFFF", "0x7F7FFFFF", "0x7F7FFFFF", "0x7F7FFFFF", "0x7F7FFFFF", "0x7F7FFFFF", "0x7F7FFFFF", "0x7F7FFFFF", "0x7F7FFFFF", "0x7F7FFFFF", "0x7F7FFFFF", "0x7F7FFFFF", "0x7F7FFFFF", "0x80855555", "0x80855555", "0x80855555", "0x80855555", "0x80855555", "0x80855555", "0x80855555", "0x80855555", "0x80855555", "0x80855555", "0x80855555", "0x80855555", "0x80855555", "0x80855555", "0x80855555", "0x80855555", "0x00800001", "0x00800001", "0x00800001", "0x00800001", "0x00800001", "0x00800001", "0x00800001", "0x00800001", "0x00800001", "0x00800001", "0x00800001", "0x00800001", "0x00800001", "0x00800001", "0x00800001", "0x00800001", "0x80800000", "0x80800000", "0x80800000", "0x80800000", "0x80800000", "0x80800000", "0x80800000", "0x80800000", "0x80800000", "0x80800000", "0x80800000", "0x80800000", "0x80800000", "0x80800000", "0x80800000", "0x80800000", "0x00800000", "0x00800000", "0x00800000", "0x00800000", "0x00800000", "0x00800000", "0x00800000", "0x00800000", "0x00800000", "0x00800000", "0x00800000", "0x00800000", "0x00800000", "0x00800000", "0x00800000",
           "0x00800000", "0x807FFFFF", "0x807FFFFF", "0x807FFFFF", "0x807FFFFF", "0x807FFFFF", "0x807FFFFF", "0x807FFFFF", "0x807FFFFF", "0x807FFFFF", "0x807FFFFF", "0x807FFFFF", "0x807FFFFF", "0x807FFFFF", "0x807FFFFF", "0x807FFFFF", "0x807FFFFF", "0x007FFFFF", "0x007FFFFF", "0x007FFFFF", "0x007FFFFF", "0x007FFFFF", "0x007FFFFF", "0x007FFFFF", "0x007FFFFF", "0x007FFFFF", "0x007FFFFF", "0x007FFFFF", "0x007FFFFF", "0x007FFFFF", "0x007FFFFF", "0x007FFFFF", "0x007FFFFF", "0x807FFFFE", "0x807FFFFE", "0x807FFFFE", "0x807FFFFE", "0x807FFFFE", "0x807FFFFE", "0x807FFFFE", "0x807FFFFE", "0x807FFFFE", "0x807FFFFE", "0x807FFFFE", "0x807FFFFE", "0x807FFFFE", "0x807FFFFE", "0x807FFFFE", "0x807FFFFE", "0x00000002", "0x00000002", "0x00000002", "0x00000002", "0x00000002", "0x00000002", "0x00000002", "0x00000002", "0x00000002", "0x00000002", "0x00000002", "0x00000002", "0x00000002", "0x00000002", "0x00000002", "0x00000002", "0x80000001", "0x80000001", "0x80000001", "0x80000001", "0x80000001", "0x80000001", "0x80000001", "0x80000001", "0x80000001", "0x80000001", "0x80000001", "0x80000001", "0x80000001", "0x80000001", "0x80000001", "0x80000001", "0x00000001", "0x00000001", "0x00000001", "0x00000001", "0x00000001", "0x00000001", "0x00000001", "0x00000001", "0x00000001", "0x00000001", "0x00000001", "0x00000001", "0x00000001", "0x00000001", "0x00000001", "0x00000001", "0x80000000", "0x80000000", "0x80000000", "0x80000000", "0x80000000", "0x80000000", "0x80000000", "0x80000000", "0x80000000", "0x80000000", "0x80000000", "0x80000000", "0x80000000", "0x80000000", "0x80000000", "0x80000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", 
           '0x16b77bce', '0x85a8a33c', '0xbe82002a', '0x6b4eed81', '0xfcf2b7b2', '0xb1a3f397', '0x81815039', '0x7df4c24f', '0x0827c929', '0xe1f1c6ec', '0x9b111081', '0x08c53c5a', '0x16e35174', '0x20553b83', '0xf4ed3db2', '0x5879b2ca', '0xf80d83b9', '0x7b48384f', '0x89a6c1a0', '0x31fe5439', '0x6ee2f5aa', '0x330f5715', '0x9f46020f', '0xb697e1c3', '0xf518acf6', '0x3958ea56', '0x56a29c95', '0xef286e01', '0xf6cad350', '0xe95400f6', '0x0b2ac811', '0x3ced78db', '0x75809524', '0xc5e59fb2', '0xdd81fa0a', '0xec9fb18d', '0x30e1830a', '0x21d2bbb0', '0x731a1760', '0x19167ebd', '0x7e537a04', '0xcf9dc475', '0x17f847a1', '0x5f4e2f05', '0x11065906', '0xa9663dbb', '0xb6d5707b', '0xef201e7b', '0xb4a84974', '0xc9feb8d1', '0xba38c7b1', '0x1877b042', '0x91778cbb', '0x2e715ec9', '0xebc88fd7', '0x6947de05', '0xaec12b86', '0x6164c29e', '0xba68fa1d', '0x17a54142', '0xbb7b049e', '0x08fab1e5', '0x1af6bb18', '0x74348a1d', '0xf41f5f9b', '0x604f267a', '0x8543a485', '0x17fca002', '0x3777625d', '0xca42df1f', '0xe9591298', '0x655428d1', '0x678995cf', '0x7ea84660', '0x049f1faf', '0x9a6ccdab', '0xf75264e4', '0x5b832e4f', '0x047e6b3b', '0xc18c4e25', '0x6676bf0e', '0x86738089', '0x1ee4a5ed', '0xb9545c29', '0x2c7cb95f', '0x8ab6881d', '0x32dc44c0', '0x7915e449', '0xb68216c7', '0x53c4ffc4', '0xc01a2b07', '0x6d56c00d', '0x231896cb', '0x3a6c685c', '0xe57e27bd', '0x3e6f7cbe', '0x8e74e2da', '0xfcea6243', '0x80eedc35', '0x048d92fb', '0xe8e803f4', '0x12c54b7b', '0x2d633cae', '0xbe8c5af3', '0x379def6c', '0xe298ae9a', '0x626b7cc5', '0x8f61b3a5', '0xe4219193', '0x01b8cfcd', '0x04bfcdf8', '0xd6cbbf81', '0x4bd075af', '0xe291d09b', '0xf0503b64', '0x21124d60', '0x17d5856b', '0x7989bf32', '0x6b84a91f', '0x3019a087', '0x01c79214', '0xea939be7', '0xc375122d', '0x116ec3d2', '0x2d7eeffe', '0xe013be07', '0xb45484fc', '0x2dcda7f1', 
           '0x2e2151fa', '0x500c5f17', '0x984b6942', '0x9960c98a', '0xc0c7c26a', '0xc714bae1', '0x7c086243', '0x9a4397f5', '0xb02b37fb', '0xec0ac4f0', '0xabb5045d', '0x4de1938f', '0x4ef87036', '0x477553ed', '0xdf884a52', '0xe364a2c3', '0x5e3d04d3', '0xa37172c6', '0x39c33e1d', '0x5fa55642', '0xc6588c96', '0x57aa9ec7', '0x52a373c8', '0x868a5027', '0xafc3fa5e', '0x804beeba', '0xbf812338', '0x53cf2324', '0x1c2a2099', '0x77275ab3', '0x8f53143f', '0x7868d163', '0x3362ef56', '0xf5c4c30d', '0x3413c9a6', '0xbae49486', '0x4d195ecf', '0x55085e69', '0x497af66c', '0x776d41f0', '0x6b06fcef', '0xec9c3cae', '0xbbcdcd90', '0xa78b9e5d', '0xb517d569', '0x58ecb82f', '0x897683b0', '0x017fed42', '0x7ac46a81', '0x6b3424e3', '0xf78c7be0', '0x225c9001', '0x716f74e5', '0x5ea07308', '0x9cb1f841', '0x69773182', '0xba7c2bc1', '0x3615b6cd', '0xb7cbdb1c', '0x57503bd7', '0x08d9043f', '0xde4c459d', '0x7a26c712', '0x563028c3', '0x795e33bf', '0xf2d19a38', '0xf20bed88', '0x7e91e990', '0x28403d8f', '0xe451d935', '0x6cbd6936', '0x4bb4197f', '0xb2301f0d', '0xc0fe2faf', '0x16598049', '0x8b074d85', '0xb3044c5f', '0x52e624b8', '0xe4b5a3ae', '0x223b3100', '0x60e69e76', '0x7b1ae2f0', '0x8837caa2', '0xa64768d4', '0xe3cafbaa', '0x409e0a27', '0x8bca7953', '0x54110db1', '0xdd376b5e', '0x82997f29', '0x355719f2', '0x409cf5f2', '0xd0f04044', '0xb1f11cd7', '0xde5e4fa6', '0xd82dd4fd', '0xe58d530d', '0x4949dc26', '0x8e5f9ede', '0x8e4a63c9', '0x3e0b7f6a', '0x721e2d49', '0xb9420e82', '0x9f300bb4', '0xdaf09bbc', '0x33939602', '0x22d815c2', '0xdd6461b8', '0xa0c1de71', '0x8412c769', '0xe03a03d1', '0x1d7e0df1', '0xaa1ba77a', '0x1fd16c33', '0xe6b2620f', '0xd80b4e8d', '0x8c57dfcc', '0x72d00ff0', '0x8d71f3bd', '0x90df5366', '0x65e2e213', '0xd4af903f', '0x0b402769', '0xe520a1a5', '0x2fd98a32', '0x8d31c277', '0x431be53f', '0x163af993',
           '0x62d5fe2f', '0xbbbfcaf3', '0x8ad27026', '0x599ec422', '0xd0e57884', '0x315858ad', '0xbb79a22b', '0x80c7fec6', '0xb8a4eaba', '0x893e4f51', '0xa204c639', '0x092d4ba0', '0x8787ab14', '0x61ce2443', '0x8ac8c0d1', '0x2a519200', '0x156dd6bc', '0x35ceb876', '0x766125a9', '0x05269d43', '0x1591c3bb', '0x7f19aaaa', '0xb68e62d5', '0x98c5df64', '0x58a4f5f8', '0x1b5d4991', '0x02046b89', '0xf4223dde', '0xcf05164e', '0xaa67f476', '0x5e100e5a', '0x8f51944a', '0x01d283cd', '0x19ea57fc', '0xe246d9c3', '0xb3ede2cf', '0x661a98bb', '0xd2e52100', '0xb54c779c', '0x8b890ead', '0x6f6d8ebb', '0x701a72e3', '0x18854a53', '0xd8b646c3', '0x7a859a9b', '0x99fb1285', '0x6a49fdb6', '0xe54c4797', '0xa13e91a2', '0x56a16ea4', '0x8dc0e4ff', '0x267eb8c3', '0xbcdd3109', '0xd18cf677', '0xc592af51', '0x639952be', '0x5ecc40d7', '0x08e1872a', '0x699b0430', '0x515deb63', '0x55107f38', '0x5ed38442', '0x9444a8cf', '0x3b6f020e', '0x3d7a2c1a', '0xe12d2042', '0xddc02bcf', '0xd793ec85', '0x89179c2a', '0x7b5bb683', '0xf3060550', '0xeb6622a3', '0x370df4fd', '0xe7026d7d', '0xa7ef2bad', '0x5d994fff', '0x6ab30fe4', '0x72d35639', '0x27c70109', '0xf283b49c', '0x3c70fd0b', '0x1f46077b', '0xc626d7b5', '0xd8664806', '0xa37e6d45', '0x69155a81', '0xe78f6b83', '0x9aba564b', '0x3616aeda', '0xb6b43b38', '0x48363fc9', '0x18fd8be4', '0x4f1f58ba', '0x19e51db5', '0xe0c53c63', '0x192352ad', '0x5639134a', '0x3b3c24ec', '0x8376196a', '0x24fcba35', '0x2cd12f68', '0x5b91a296', '0x0a9edbe9', '0xbc4fb8ab', '0x68714601', '0xf6077257', '0x6baa10f2', '0x210eee6d', '0x9d9d1deb', '0x52a2c944', '0x69da5807', '0x5643827a', '0x548fa17d', '0x0125e3bc', '0x34294c82', '0xd612accc', '0x7c624102', '0x81457ac4', '0x169e8d7e', '0x82d5d8cc', '0x2afa1e78', '0xdb9ca373', '0x8a002b93', '0xb686377f', '0xc0570d1e', '0x6682aa99', '0xd3ab2b5b', '0x32ce890a', 
           '0x50408aba', '0xb4ea3655', '0x57385489', '0xeef03e8d', '0xde17d645', '0x0e7f9a32', '0xeeca2f3b', '0xf14f95f4', '0x63b7a76e', '0xbcc9ab43', '0xdfeeae1d', '0x65eed45a', '0xc8e4911e', '0x61bee6e3', '0x5a888b0b', '0xe8b9b2cd', '0x1bc3cb1f', '0x6c9a9490', '0x94518e9b', '0x89b67375', '0xd4bea2c1', '0xd7ac95f6', '0xb4fe5b7c', '0x59dac688', '0xd864b555', '0xf0a45c48', '0x8debdd64', '0x78f0b6be', '0xea5bd793', '0x837bb1b9', '0xb8879ad6', '0xa62bf1a5', '0x27457e6e', '0xc42dea11', '0xbc0e79b9', '0x72ae0ac9', '0xe29df404', '0xb117f9b7', '0xf0abe8ea', '0x5b82f781', '0x3aba4a26', '0xefea5e67', '0x688be24b', '0x21ad1582', '0xa294f0b8', '0xa6440f97', '0x5ea2d0b9', '0xbdc0571c', '0x2442a91b', '0x0c377326', '0x533c8dfe', '0xe21ef6aa', '0x919fa67d', '0x873f1671', '0x2a9f2e23', '0xbe22927b', '0xa992efc3', '0x75ce1220', '0x4447a68d', '0x3f78b414', '0xbd72133e', '0x0cee6997', '0x1a1b49f6', '0x74cefef0', '0xdb8a3bd9', '0x4b329421', '0x3a31ab60', '0xe953c01f', '0x0f147ddf', '0xcf457330', '0x19f95636', '0x30610d6c', '0x7cfe6ad7', '0x51a59b6f', '0xbe384770', '0x336dc41b', '0xa87f271a', '0x6c9121e1', '0xa73c95c4', '0xcaf0a32c', '0x46f5a171', '0x251c1e00', '0xac7c3863', '0x8f02a18c', '0x91fd21c8', '0x4453aa24', '0x8cc4c438', '0xbcafd1ca', '0x767634b8', '0x177434a8', '0x4602bb95', '0xbb2a44f6', '0xe1cd9683', '0xc649858c', '0x834794d4', '0xe226001f', '0x3bbf119a', '0x0aeac265', '0x41649ded', '0x54d909fd', '0x82c44d2b', '0x85371e54', '0x91074282', '0x61ae58b5', '0xc611ba41', '0xd0fb779f', '0x999f8b26', '0xa113808e', '0x675a54fd', '0x8864b1ab', '0xcd9e4966', '0xecdb94a3', '0x50fb73b8', '0x1566303a', '0xf77c3228', '0xde7da192', '0x1a2510c7', '0x8c4f914e', '0xae52acb6', '0x269ca43a', '0x112bfa6f', '0xe6388e69', '0x9f9c2d14', '0x85d763a6', '0xac497736', '0x8a462146', '0xd2300ca6', '0xab04b597',
           '0xd5173d3b', '0x1c954c88', '0xae8f2f8a', '0xe18cd6d3', '0xe7128ead', '0x430c45f2', '0x1fece821', '0xdbe8db2f', '0x9deac411', '0xd578536b', '0x5a2112c5', '0x33755502', '0x41f512c8', '0x5b07c90e', '0x30e95eba', '0xdc43d0d7', '0xce250988', '0x546ef0b9', '0x7c69a228', '0x540da0bc', '0xb917bde6', '0x2b14a548', '0x5c51c72f', '0xe66cd16e', '0xf8e67fb0', '0x45b5c5f1', '0x6bd9ba9a', '0x9c1e8667', '0x8a2c7d45', '0xaf61ac13', '0xcc06f22d', '0x6ac84f04', '0x581f3afc', '0x6122b26e', '0xff4914a8', '0xf0a80a4a', '0x44577dfa', '0xe31172b1', '0x30b00f6c', '0x9cd4367e', '0x53266571', '0x39a2b9a9', '0xf628feb7', '0x519a8397', '0xd949e747', '0xfe0b7d68', '0xd2ec6f9d', '0x7b9f0a06', '0xe25828a9', '0x6ff72e08', '0xae72d34d', '0xf61fde3e', '0x1cb57d88', '0x3bb5e465', '0x89b4574b', '0xae23f858', '0x32b4b342', '0x9c5034c7', '0x6129cabb', '0x9af4bc9a', '0xc729acef', '0x7d485219', '0x4a3b445a', '0x276f4a82', '0xdd7bf9fc', '0x6797c5aa', '0x9c739bc0', '0x37e6587a', '0x292fa2d6', '0x57b6f48d', '0xa87ebd39', '0xda3b9803', '0xcf98db80', '0xa1993841', '0x214c72b3', '0x4a289aa8', '0x3d7777d1', '0x579e0114', '0x13d30cfc', '0x8a19a62b', '0x07041e7d', '0x3b192289', '0xb8f72c52', '0x3a7c4f91', '0x2eadf0ac', '0xdbfec094', '0x8c1ae516', '0xbb97f344', '0x2d614a74', '0xdbb7bc69', '0x75160c80', '0x026513b2', '0xb3301eb1', '0x513b24cd', '0xd2d18754', '0x0fccea6a', '0xb4e15b15', '0xb546b05b', '0x0f952852', '0x7dbe9d89', '0xf8791ac8', '0xd924a386', '0xdf5f99f4', '0x6618d504', '0x8849a498', '0xf2961261', '0xe303d466', '0xd9d90f64', '0x9ceb7bc1', '0x07b60686', '0x92dc0a8a', '0x93997373', '0xe19d8f2e', '0xdd4ad4c7', '0x0b3419eb', '0x46365e84', '0x92db17e9', '0x65cdd905', '0xdd60629d', '0x16478c58', '0xd11c290e', '0x0d899e08', '0xc9770a1f', '0xac39d155', '0x0f7a7733', '0xa946bce1', '0x4e00d0f3', '0x3aa41dc4', 
           '0x0a9f9511', '0x5398487b', '0xf3782028', '0x69b76600', '0x8ca3efb3', '0xcb7da0de', '0x552d23d2', '0x3436f14c', '0x6f5f3f35', '0x53b5a207', '0xd20dfb9f', '0x8723b674', '0x0f348d99', '0x3886ab90', '0x0334f85a', '0xea1670df', '0xd13744b3', '0x883fe017', '0x1daf3b01', '0xa9c63a58', '0xec747b1c', '0x0c6eccf7', '0x4cad30bc', '0x477b3771', '0xaeef6b3d', '0x1555f68c', '0xb7e378a2', '0xb602bd3e', '0xaf130fb6', '0x31a4314a', '0xc723b3d7', '0x7015aa42', '0x0928aa3e', '0x22ef3704', '0xf352256b', '0x4da52bc4', '0x546d8880', '0xf78ee9c7', '0xc95bd691', '0x5239bc94', '0xb48c2fbf', '0x67e301b5', '0x240451c9', '0x27c6864f', '0x26c6f274', '0x25f55d4e', '0x5d2eb86f', '0x828a97e7', '0x67e912e1', '0x3d4617ee', '0x09322d7d', '0x1eca00ff', '0x2ecc47d2', '0xf3bb23d6', '0xab05bda1', '0xbebbadd8', '0x76ca2ed2', '0x2b20cd36', '0x524f229d', '0x5254e959', '0x2aef92ad', '0x31229858', '0xb06bc8f6', '0x5dcce032', '0x310e5031', '0xf2069096', '0x072a3060', '0x9c33042c', '0x06dd7d38', '0xe4b100b8', '0x04c5e517', '0x3b50cc02', '0x6f0086f2', '0xc583b3da', '0xae6ff135', '0x7815f9b0', '0x5cc84607', '0x754bced3', '0xaec59a2a', '0x8542dc85', '0x3af43c9d', '0xae8c12b8', '0x67be397d', '0x8758cfc4', '0x1de4f6af', '0x1a455288', '0x88db7d8c', '0xf937aafa', '0xca3650e2', '0xc7044eb3', '0x58933db0', '0x0545acbb', '0xb379a614', '0x9b3eb4cc', '0xe9519192', '0x2eb0d339', '0xf575e7bb', '0xee907664', '0x53960a4c', '0x87973a27', '0xa925b817', '0x1c1a1e45', '0x20dcdbeb', '0x2d3e0667', '0x53d05d72', '0xb822ad39', '0x4ffe6390', '0x9ef29035', '0xd0450fa2', '0x0d89744e', '0x346489f5', '0xd48dd733', '0x5d857c31', '0x9b185404', '0x41059de4', '0x12d11883', '0xa647e794', '0xd5710481', '0xcca75bc9', '0x28ea8990', '0x4914fd85', '0x9edd447a', '0x1a012a8e', '0x697d2a85', '0x0e3deb9d', '0x9da1bcd6', '0x5254ddf9', '0x0c3eab36',]
rs2_val = ['0xd5173d3b', '0x1c954c88', '0xae8f2f8a', '0xe18cd6d3', '0xe7128ead', '0x430c45f2', '0x1fece821', '0xdbe8db2f', '0x9deac411', '0xd578536b', '0x5a2112c5', '0x33755502', '0x41f512c8', '0x5b07c90e', '0x30e95eba', '0xdc43d0d7', '0xce250988', '0x546ef0b9', '0x7c69a228', '0x540da0bc', '0xb917bde6', '0x2b14a548', '0x5c51c72f', '0xe66cd16e', '0xf8e67fb0', '0x45b5c5f1', '0x6bd9ba9a', '0x9c1e8667', '0x8a2c7d45', '0xaf61ac13', '0xcc06f22d', '0x6ac84f04', '0x581f3afc', '0x6122b26e', '0xff4914a8', '0xf0a80a4a', '0x44577dfa', '0xe31172b1', '0x30b00f6c', '0x9cd4367e', '0x53266571', '0x39a2b9a9', '0xf628feb7', '0x519a8397', '0xd949e747', '0xfe0b7d68', '0xd2ec6f9d', '0x7b9f0a06', '0xe25828a9', '0x6ff72e08', '0xae72d34d', '0xf61fde3e', '0x1cb57d88', '0x3bb5e465', '0x89b4574b', '0xae23f858', '0x32b4b342', '0x9c5034c7', '0x6129cabb', '0x9af4bc9a', '0xc729acef', '0x7d485219', '0x4a3b445a', '0x276f4a82', '0xdd7bf9fc', '0x6797c5aa', '0x9c739bc0', '0x37e6587a', '0x292fa2d6', '0x57b6f48d', '0xa87ebd39', '0xda3b9803', '0xcf98db80', '0xa1993841', '0x214c72b3', '0x4a289aa8', '0x3d7777d1', '0x579e0114', '0x13d30cfc', '0x8a19a62b', '0x07041e7d', '0x3b192289', '0xb8f72c52', '0x3a7c4f91', '0x2eadf0ac', '0xdbfec094', '0x8c1ae516', '0xbb97f344', '0x2d614a74', '0xdbb7bc69', '0x75160c80', '0x026513b2', '0xb3301eb1', '0x513b24cd', '0xd2d18754', '0x0fccea6a', '0xb4e15b15', '0xb546b05b', '0x0f952852', '0x7dbe9d89', '0xf8791ac8', '0xd924a386', '0xdf5f99f4', '0x6618d504', '0x8849a498', '0xf2961261', '0xe303d466', '0xd9d90f64', '0x9ceb7bc1', '0x07b60686', '0x92dc0a8a', '0x93997373', '0xe19d8f2e', '0xdd4ad4c7', '0x0b3419eb', '0x46365e84', '0x92db17e9', '0x65cdd905', '0xdd60629d', '0x16478c58', '0xd11c290e', '0x0d899e08', '0xc9770a1f', '0xac39d155', '0x0f7a7733', '0xa946bce1', '0x4e00d0f3', '0x3aa41dc4', 
           '0x0a9f9511', '0x5398487b', '0xf3782028', '0x69b76600', '0x8ca3efb3', '0xcb7da0de', '0x552d23d2', '0x3436f14c', '0x6f5f3f35', '0x53b5a207', '0xd20dfb9f', '0x8723b674', '0x0f348d99', '0x3886ab90', '0x0334f85a', '0xea1670df', '0xd13744b3', '0x883fe017', '0x1daf3b01', '0xa9c63a58', '0xec747b1c', '0x0c6eccf7', '0x4cad30bc', '0x477b3771', '0xaeef6b3d', '0x1555f68c', '0xb7e378a2', '0xb602bd3e', '0xaf130fb6', '0x31a4314a', '0xc723b3d7', '0x7015aa42', '0x0928aa3e', '0x22ef3704', '0xf352256b', '0x4da52bc4', '0x546d8880', '0xf78ee9c7', '0xc95bd691', '0x5239bc94', '0xb48c2fbf', '0x67e301b5', '0x240451c9', '0x27c6864f', '0x26c6f274', '0x25f55d4e', '0x5d2eb86f', '0x828a97e7', '0x67e912e1', '0x3d4617ee', '0x09322d7d', '0x1eca00ff', '0x2ecc47d2', '0xf3bb23d6', '0xab05bda1', '0xbebbadd8', '0x76ca2ed2', '0x2b20cd36', '0x524f229d', '0x5254e959', '0x2aef92ad', '0x31229858', '0xb06bc8f6', '0x5dcce032', '0x310e5031', '0xf2069096', '0x072a3060', '0x9c33042c', '0x06dd7d38', '0xe4b100b8', '0x04c5e517', '0x3b50cc02', '0x6f0086f2', '0xc583b3da', '0xae6ff135', '0x7815f9b0', '0x5cc84607', '0x754bced3', '0xaec59a2a', '0x8542dc85', '0x3af43c9d', '0xae8c12b8', '0x67be397d', '0x8758cfc4', '0x1de4f6af', '0x1a455288', '0x88db7d8c', '0xf937aafa', '0xca3650e2', '0xc7044eb3', '0x58933db0', '0x0545acbb', '0xb379a614', '0x9b3eb4cc', '0xe9519192', '0x2eb0d339', '0xf575e7bb', '0xee907664', '0x53960a4c', '0x87973a27', '0xa925b817', '0x1c1a1e45', '0x20dcdbeb', '0x2d3e0667', '0x53d05d72', '0xb822ad39', '0x4ffe6390', '0x9ef29035', '0xd0450fa2', '0x0d89744e', '0x346489f5', '0xd48dd733', '0x5d857c31', '0x9b185404', '0x41059de4', '0x12d11883', '0xa647e794', '0xd5710481', '0xcca75bc9', '0x28ea8990', '0x4914fd85', '0x9edd447a', '0x1a012a8e', '0x697d2a85', '0x0e3deb9d', '0x9da1bcd6', '0x5254ddf9', '0x0c3eab36',
           '0x16b77bce', '0x85a8a33c', '0xbe82002a', '0x6b4eed81', '0xfcf2b7b2', '0xb1a3f397', '0x81815039', '0x7df4c24f', '0x0827c929', '0xe1f1c6ec', '0x9b111081', '0x08c53c5a', '0x16e35174', '0x20553b83', '0xf4ed3db2', '0x5879b2ca', '0xf80d83b9', '0x7b48384f', '0x89a6c1a0', '0x31fe5439', '0x6ee2f5aa', '0x330f5715', '0x9f46020f', '0xb697e1c3', '0xf518acf6', '0x3958ea56', '0x56a29c95', '0xef286e01', '0xf6cad350', '0xe95400f6', '0x0b2ac811', '0x3ced78db', '0x75809524', '0xc5e59fb2', '0xdd81fa0a', '0xec9fb18d', '0x30e1830a', '0x21d2bbb0', '0x731a1760', '0x19167ebd', '0x7e537a04', '0xcf9dc475', '0x17f847a1', '0x5f4e2f05', '0x11065906', '0xa9663dbb', '0xb6d5707b', '0xef201e7b', '0xb4a84974', '0xc9feb8d1', '0xba38c7b1', '0x1877b042', '0x91778cbb', '0x2e715ec9', '0xebc88fd7', '0x6947de05', '0xaec12b86', '0x6164c29e', '0xba68fa1d', '0x17a54142', '0xbb7b049e', '0x08fab1e5', '0x1af6bb18', '0x74348a1d', '0xf41f5f9b', '0x604f267a', '0x8543a485', '0x17fca002', '0x3777625d', '0xca42df1f', '0xe9591298', '0x655428d1', '0x678995cf', '0x7ea84660', '0x049f1faf', '0x9a6ccdab', '0xf75264e4', '0x5b832e4f', '0x047e6b3b', '0xc18c4e25', '0x6676bf0e', '0x86738089', '0x1ee4a5ed', '0xb9545c29', '0x2c7cb95f', '0x8ab6881d', '0x32dc44c0', '0x7915e449', '0xb68216c7', '0x53c4ffc4', '0xc01a2b07', '0x6d56c00d', '0x231896cb', '0x3a6c685c', '0xe57e27bd', '0x3e6f7cbe', '0x8e74e2da', '0xfcea6243', '0x80eedc35', '0x048d92fb', '0xe8e803f4', '0x12c54b7b', '0x2d633cae', '0xbe8c5af3', '0x379def6c', '0xe298ae9a', '0x626b7cc5', '0x8f61b3a5', '0xe4219193', '0x01b8cfcd', '0x04bfcdf8', '0xd6cbbf81', '0x4bd075af', '0xe291d09b', '0xf0503b64', '0x21124d60', '0x17d5856b', '0x7989bf32', '0x6b84a91f', '0x3019a087', '0x01c79214', '0xea939be7', '0xc375122d', '0x116ec3d2', '0x2d7eeffe', '0xe013be07', '0xb45484fc', '0x2dcda7f1', 
           '0x2e2151fa', '0x500c5f17', '0x984b6942', '0x9960c98a', '0xc0c7c26a', '0xc714bae1', '0x7c086243', '0x9a4397f5', '0xb02b37fb', '0xec0ac4f0', '0xabb5045d', '0x4de1938f', '0x4ef87036', '0x477553ed', '0xdf884a52', '0xe364a2c3', '0x5e3d04d3', '0xa37172c6', '0x39c33e1d', '0x5fa55642', '0xc6588c96', '0x57aa9ec7', '0x52a373c8', '0x868a5027', '0xafc3fa5e', '0x804beeba', '0xbf812338', '0x53cf2324', '0x1c2a2099', '0x77275ab3', '0x8f53143f', '0x7868d163', '0x3362ef56', '0xf5c4c30d', '0x3413c9a6', '0xbae49486', '0x4d195ecf', '0x55085e69', '0x497af66c', '0x776d41f0', '0x6b06fcef', '0xec9c3cae', '0xbbcdcd90', '0xa78b9e5d', '0xb517d569', '0x58ecb82f', '0x897683b0', '0x017fed42', '0x7ac46a81', '0x6b3424e3', '0xf78c7be0', '0x225c9001', '0x716f74e5', '0x5ea07308', '0x9cb1f841', '0x69773182', '0xba7c2bc1', '0x3615b6cd', '0xb7cbdb1c', '0x57503bd7', '0x08d9043f', '0xde4c459d', '0x7a26c712', '0x563028c3', '0x795e33bf', '0xf2d19a38', '0xf20bed88', '0x7e91e990', '0x28403d8f', '0xe451d935', '0x6cbd6936', '0x4bb4197f', '0xb2301f0d', '0xc0fe2faf', '0x16598049', '0x8b074d85', '0xb3044c5f', '0x52e624b8', '0xe4b5a3ae', '0x223b3100', '0x60e69e76', '0x7b1ae2f0', '0x8837caa2', '0xa64768d4', '0xe3cafbaa', '0x409e0a27', '0x8bca7953', '0x54110db1', '0xdd376b5e', '0x82997f29', '0x355719f2', '0x409cf5f2', '0xd0f04044', '0xb1f11cd7', '0xde5e4fa6', '0xd82dd4fd', '0xe58d530d', '0x4949dc26', '0x8e5f9ede', '0x8e4a63c9', '0x3e0b7f6a', '0x721e2d49', '0xb9420e82', '0x9f300bb4', '0xdaf09bbc', '0x33939602', '0x22d815c2', '0xdd6461b8', '0xa0c1de71', '0x8412c769', '0xe03a03d1', '0x1d7e0df1', '0xaa1ba77a', '0x1fd16c33', '0xe6b2620f', '0xd80b4e8d', '0x8c57dfcc', '0x72d00ff0', '0x8d71f3bd', '0x90df5366', '0x65e2e213', '0xd4af903f', '0x0b402769', '0xe520a1a5', '0x2fd98a32', '0x8d31c277', '0x431be53f', '0x163af993',
           "0x00000000", "0xBF800000", "0x3F800000", "0xFF7FFFFF", "0x7F7FFFFF", "0x80855555", "0x00800001", "0x80800000", "0x00800000", "0x807FFFFF", "0x007FFFFF", "0x807FFFFE", "0x00000002", "0x80000001", "0x00000001", "0x80000000", "0x00000000", "0xBF800000", "0x3F800000", "0xFF7FFFFF", "0x7F7FFFFF", "0x80855555", "0x00800001", "0x80800000", "0x00800000", "0x807FFFFF", "0x007FFFFF", "0x807FFFFE", "0x00000002", "0x80000001", "0x00000001", "0x80000000", "0x00000000", "0xBF800000", "0x3F800000", "0xFF7FFFFF", "0x7F7FFFFF", "0x80855555", "0x00800001", "0x80800000", "0x00800000", "0x807FFFFF", "0x007FFFFF", "0x807FFFFE", "0x00000002", "0x80000001", "0x00000001", "0x80000000", "0x00000000", "0xBF800000", "0x3F800000", "0xFF7FFFFF", "0x7F7FFFFF", "0x80855555", "0x00800001", "0x80800000", "0x00800000", "0x807FFFFF", "0x007FFFFF", "0x807FFFFE", "0x00000002", "0x80000001", "0x00000001", "0x80000000", "0x00000000", "0xBF800000", "0x3F800000", "0xFF7FFFFF", "0x7F7FFFFF", "0x80855555", "0x00800001", "0x80800000", "0x00800000", "0x807FFFFF", "0x007FFFFF", "0x807FFFFE", "0x00000002", "0x80000001", "0x00000001", "0x80000000", "0x00000000", "0xBF800000", "0x3F800000", "0xFF7FFFFF", "0x7F7FFFFF", "0x80855555", "0x00800001", "0x80800000", "0x00800000", "0x807FFFFF", "0x007FFFFF", "0x807FFFFE", "0x00000002", "0x80000001", "0x00000001", "0x80000000", "0x00000000", "0xBF800000", "0x3F800000", "0xFF7FFFFF", "0x7F7FFFFF", "0x80855555", "0x00800001", "0x80800000", "0x00800000", "0x807FFFFF", "0x007FFFFF", "0x807FFFFE", "0x00000002", "0x80000001", "0x00000001", "0x80000000", "0x00000000", "0xBF800000", "0x3F800000", "0xFF7FFFFF", "0x7F7FFFFF", "0x80855555", "0x00800001", "0x80800000", "0x00800000", "0x807FFFFF", "0x007FFFFF", "0x807FFFFE", "0x00000002", "0x80000001", "0x00000001", "0x80000000",
           "0x00000000", "0xBF800000", "0x3F800000", "0xFF7FFFFF", "0x7F7FFFFF", "0x80855555", "0x00800001", "0x80800000", "0x00800000", "0x807FFFFF", "0x007FFFFF", "0x807FFFFE", "0x00000002", "0x80000001", "0x00000001", "0x80000000", "0x00000000", "0xBF800000", "0x3F800000", "0xFF7FFFFF", "0x7F7FFFFF", "0x80855555", "0x00800001", "0x80800000", "0x00800000", "0x807FFFFF", "0x007FFFFF", "0x807FFFFE", "0x00000002", "0x80000001", "0x00000001", "0x80000000", "0x00000000", "0xBF800000", "0x3F800000", "0xFF7FFFFF", "0x7F7FFFFF", "0x80855555", "0x00800001", "0x80800000", "0x00800000", "0x807FFFFF", "0x007FFFFF", "0x807FFFFE", "0x00000002", "0x80000001", "0x00000001", "0x80000000", "0x00000000", "0xBF800000", "0x3F800000", "0xFF7FFFFF", "0x7F7FFFFF", "0x80855555", "0x00800001", "0x80800000", "0x00800000", "0x807FFFFF", "0x007FFFFF", "0x807FFFFE", "0x00000002", "0x80000001", "0x00000001", "0x80000000", "0x00000000", "0xBF800000", "0x3F800000", "0xFF7FFFFF", "0x7F7FFFFF", "0x80855555", "0x00800001", "0x80800000", "0x00800000", "0x807FFFFF", "0x007FFFFF", "0x807FFFFE", "0x00000002", "0x80000001", "0x00000001", "0x80000000", "0x00000000", "0xBF800000", "0x3F800000", "0xFF7FFFFF", "0x7F7FFFFF", "0x80855555", "0x00800001", "0x80800000", "0x00800000", "0x807FFFFF", "0x007FFFFF", "0x807FFFFE", "0x00000002", "0x80000001", "0x00000001", "0x80000000", "0x00000000", "0xBF800000", "0x3F800000", "0xFF7FFFFF", "0x7F7FFFFF", "0x80855555", "0x00800001", "0x80800000", "0x00800000", "0x807FFFFF", "0x007FFFFF", "0x807FFFFE", "0x00000002", "0x80000001", "0x00000001", "0x80000000", "0x00000000", "0xBF800000", "0x3F800000", "0xFF7FFFFF", "0x7F7FFFFF", "0x80855555", "0x00800001", "0x80800000", "0x00800000", "0x807FFFFF", "0x007FFFFF", "0x807FFFFE", "0x00000002", "0x80000001", "0x00000001", "0x80000000",
           '0x62d5fe2f', '0xbbbfcaf3', '0x8ad27026', '0x599ec422', '0xd0e57884', '0x315858ad', '0xbb79a22b', '0x80c7fec6', '0xb8a4eaba', '0x893e4f51', '0xa204c639', '0x092d4ba0', '0x8787ab14', '0x61ce2443', '0x8ac8c0d1', '0x2a519200', '0x156dd6bc', '0x35ceb876', '0x766125a9', '0x05269d43', '0x1591c3bb', '0x7f19aaaa', '0xb68e62d5', '0x98c5df64', '0x58a4f5f8', '0x1b5d4991', '0x02046b89', '0xf4223dde', '0xcf05164e', '0xaa67f476', '0x5e100e5a', '0x8f51944a', '0x01d283cd', '0x19ea57fc', '0xe246d9c3', '0xb3ede2cf', '0x661a98bb', '0xd2e52100', '0xb54c779c', '0x8b890ead', '0x6f6d8ebb', '0x701a72e3', '0x18854a53', '0xd8b646c3', '0x7a859a9b', '0x99fb1285', '0x6a49fdb6', '0xe54c4797', '0xa13e91a2', '0x56a16ea4', '0x8dc0e4ff', '0x267eb8c3', '0xbcdd3109', '0xd18cf677', '0xc592af51', '0x639952be', '0x5ecc40d7', '0x08e1872a', '0x699b0430', '0x515deb63', '0x55107f38', '0x5ed38442', '0x9444a8cf', '0x3b6f020e', '0x3d7a2c1a', '0xe12d2042', '0xddc02bcf', '0xd793ec85', '0x89179c2a', '0x7b5bb683', '0xf3060550', '0xeb6622a3', '0x370df4fd', '0xe7026d7d', '0xa7ef2bad', '0x5d994fff', '0x6ab30fe4', '0x72d35639', '0x27c70109', '0xf283b49c', '0x3c70fd0b', '0x1f46077b', '0xc626d7b5', '0xd8664806', '0xa37e6d45', '0x69155a81', '0xe78f6b83', '0x9aba564b', '0x3616aeda', '0xb6b43b38', '0x48363fc9', '0x18fd8be4', '0x4f1f58ba', '0x19e51db5', '0xe0c53c63', '0x192352ad', '0x5639134a', '0x3b3c24ec', '0x8376196a', '0x24fcba35', '0x2cd12f68', '0x5b91a296', '0x0a9edbe9', '0xbc4fb8ab', '0x68714601', '0xf6077257', '0x6baa10f2', '0x210eee6d', '0x9d9d1deb', '0x52a2c944', '0x69da5807', '0x5643827a', '0x548fa17d', '0x0125e3bc', '0x34294c82', '0xd612accc', '0x7c624102', '0x81457ac4', '0x169e8d7e', '0x82d5d8cc', '0x2afa1e78', '0xdb9ca373', '0x8a002b93', '0xb686377f', '0xc0570d1e', '0x6682aa99', '0xd3ab2b5b', '0x32ce890a',
           '0x50408aba', '0xb4ea3655', '0x57385489', '0xeef03e8d', '0xde17d645', '0x0e7f9a32', '0xeeca2f3b', '0xf14f95f4', '0x63b7a76e', '0xbcc9ab43', '0xdfeeae1d', '0x65eed45a', '0xc8e4911e', '0x61bee6e3', '0x5a888b0b', '0xe8b9b2cd', '0x1bc3cb1f', '0x6c9a9490', '0x94518e9b', '0x89b67375', '0xd4bea2c1', '0xd7ac95f6', '0xb4fe5b7c', '0x59dac688', '0xd864b555', '0xf0a45c48', '0x8debdd64', '0x78f0b6be', '0xea5bd793', '0x837bb1b9', '0xb8879ad6', '0xa62bf1a5', '0x27457e6e', '0xc42dea11', '0xbc0e79b9', '0x72ae0ac9', '0xe29df404', '0xb117f9b7', '0xf0abe8ea', '0x5b82f781', '0x3aba4a26', '0xefea5e67', '0x688be24b', '0x21ad1582', '0xa294f0b8', '0xa6440f97', '0x5ea2d0b9', '0xbdc0571c', '0x2442a91b', '0x0c377326', '0x533c8dfe', '0xe21ef6aa', '0x919fa67d', '0x873f1671', '0x2a9f2e23', '0xbe22927b', '0xa992efc3', '0x75ce1220', '0x4447a68d', '0x3f78b414', '0xbd72133e', '0x0cee6997', '0x1a1b49f6', '0x74cefef0', '0xdb8a3bd9', '0x4b329421', '0x3a31ab60', '0xe953c01f', '0x0f147ddf', '0xcf457330', '0x19f95636', '0x30610d6c', '0x7cfe6ad7', '0x51a59b6f', '0xbe384770', '0x336dc41b', '0xa87f271a', '0x6c9121e1', '0xa73c95c4', '0xcaf0a32c', '0x46f5a171', '0x251c1e00', '0xac7c3863', '0x8f02a18c', '0x91fd21c8', '0x4453aa24', '0x8cc4c438', '0xbcafd1ca', '0x767634b8', '0x177434a8', '0x4602bb95', '0xbb2a44f6', '0xe1cd9683', '0xc649858c', '0x834794d4', '0xe226001f', '0x3bbf119a', '0x0aeac265', '0x41649ded', '0x54d909fd', '0x82c44d2b', '0x85371e54', '0x91074282', '0x61ae58b5', '0xc611ba41', '0xd0fb779f', '0x999f8b26', '0xa113808e', '0x675a54fd', '0x8864b1ab', '0xcd9e4966', '0xecdb94a3', '0x50fb73b8', '0x1566303a', '0xf77c3228', '0xde7da192', '0x1a2510c7', '0x8c4f914e', '0xae52acb6', '0x269ca43a', '0x112bfa6f', '0xe6388e69', '0x9f9c2d14', '0x85d763a6', '0xac497736', '0x8a462146', '0xd2300ca6', '0xab04b597']
rs1_val_64 = ['0x0000000000000000', '0x0000000000000000', '0x0000000000000000', '0x0000000000000000', '0x0000000000000000', '0x0000000000000000', '0x0000000000000000', '0x0000000000000000', '0x0000000000000000', '0x0000000000000000', '0x0000000000000000', '0x0000000000000000', '0x0000000000000000', '0x0000000000000000', '0x0000000000000000', '0x0000000000000000', '0x8000000000000000', '0x8000000000000000', '0x8000000000000000', '0x8000000000000000', '0x8000000000000000', '0x8000000000000000', '0x8000000000000000', '0x8000000000000000', '0x8000000000000000', '0x8000000000000000', '0x8000000000000000', '0x8000000000000000', '0x8000000000000000', '0x8000000000000000', '0x8000000000000000', '0x8000000000000000', '0x0000000000000001', '0x0000000000000001', '0x0000000000000001', '0x0000000000000001', '0x0000000000000001', '0x0000000000000001', '0x0000000000000001', '0x0000000000000001', '0x0000000000000001', '0x0000000000000001', '0x0000000000000001', '0x0000000000000001', '0x0000000000000001', '0x0000000000000001', '0x0000000000000001', '0x0000000000000001', '0x8000000000000001', '0x8000000000000001', '0x8000000000000001', '0x8000000000000001', '0x8000000000000001', '0x8000000000000001', '0x8000000000000001', '0x8000000000000001', '0x8000000000000001', '0x8000000000000001', '0x8000000000000001', '0x8000000000000001', '0x8000000000000001', '0x8000000000000001', '0x8000000000000001', '0x8000000000000001',
              '0x0000000000000002', '0x0000000000000002', '0x0000000000000002', '0x0000000000000002', '0x0000000000000002', '0x0000000000000002', '0x0000000000000002', '0x0000000000000002', '0x0000000000000002', '0x0000000000000002', '0x0000000000000002', '0x0000000000000002', '0x0000000000000002', '0x0000000000000002', '0x0000000000000002', '0x0000000000000002', '0x8000000000000002', '0x8000000000000002', '0x8000000000000002', '0x8000000000000002', '0x8000000000000002', '0x8000000000000002', '0x8000000000000002', '0x8000000000000002', '0x8000000000000002', '0x8000000000000002', '0x8000000000000002', '0x8000000000000002', '0x8000000000000002', '0x8000000000000002', '0x8000000000000002', '0x8000000000000002', '0x000FFFFFFFFFFFFF', '0x000FFFFFFFFFFFFF', '0x000FFFFFFFFFFFFF', '0x000FFFFFFFFFFFFF', '0x000FFFFFFFFFFFFF', '0x000FFFFFFFFFFFFF', '0x000FFFFFFFFFFFFF', '0x000FFFFFFFFFFFFF', '0x000FFFFFFFFFFFFF', '0x000FFFFFFFFFFFFF', '0x000FFFFFFFFFFFFF', '0x000FFFFFFFFFFFFF', '0x000FFFFFFFFFFFFF', '0x000FFFFFFFFFFFFF', '0x000FFFFFFFFFFFFF', '0x000FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF',
              '0x0010000000000000', '0x0010000000000000', '0x0010000000000000', '0x0010000000000000', '0x0010000000000000', '0x0010000000000000', '0x0010000000000000', '0x0010000000000000', '0x0010000000000000', '0x0010000000000000', '0x0010000000000000', '0x0010000000000000', '0x0010000000000000', '0x0010000000000000', '0x0010000000000000', '0x0010000000000000', '0x8010000000000000', '0x8010000000000000', '0x8010000000000000', '0x8010000000000000', '0x8010000000000000', '0x8010000000000000', '0x8010000000000000', '0x8010000000000000', '0x8010000000000000', '0x8010000000000000', '0x8010000000000000', '0x8010000000000000', '0x8010000000000000', '0x8010000000000000', '0x8010000000000000', '0x8010000000000000', '0x0010000000000002', '0x0010000000000002', '0x0010000000000002', '0x0010000000000002', '0x0010000000000002', '0x0010000000000002', '0x0010000000000002', '0x0010000000000002', '0x0010000000000002', '0x0010000000000002', '0x0010000000000002', '0x0010000000000002', '0x0010000000000002', '0x0010000000000002', '0x0010000000000002', '0x0010000000000002', '0x8010000000000002', '0x8010000000000002', '0x8010000000000002', '0x8010000000000002', '0x8010000000000002', '0x8010000000000002', '0x8010000000000002', '0x8010000000000002', '0x8010000000000002', '0x8010000000000002', '0x8010000000000002', '0x8010000000000002', '0x8010000000000002', '0x8010000000000002', '0x8010000000000002', '0x8010000000000002',
              '0x7FEFFFFFFFFFFFFF', '0x7FEFFFFFFFFFFFFF', '0x7FEFFFFFFFFFFFFF', '0x7FEFFFFFFFFFFFFF', '0x7FEFFFFFFFFFFFFF', '0x7FEFFFFFFFFFFFFF', '0x7FEFFFFFFFFFFFFF', '0x7FEFFFFFFFFFFFFF', '0x7FEFFFFFFFFFFFFF', '0x7FEFFFFFFFFFFFFF', '0x7FEFFFFFFFFFFFFF', '0x7FEFFFFFFFFFFFFF', '0x7FEFFFFFFFFFFFFF', '0x7FEFFFFFFFFFFFFF', '0x7FEFFFFFFFFFFFFF', '0x7FEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0x3FF0000000000000', '0x3FF0000000000000', '0x3FF0000000000000', '0x3FF0000000000000', '0x3FF0000000000000', '0x3FF0000000000000', '0x3FF0000000000000', '0x3FF0000000000000', '0x3FF0000000000000', '0x3FF0000000000000', '0x3FF0000000000000', '0x3FF0000000000000', '0x3FF0000000000000', '0x3FF0000000000000', '0x3FF0000000000000', '0x3FF0000000000000', '0xBF80000000000000', '0xBF80000000000000', '0xBF80000000000000', '0xBF80000000000000', '0xBF80000000000000', '0xBF80000000000000', '0xBF80000000000000', '0xBF80000000000000', '0xBF80000000000000', '0xBF80000000000000', '0xBF80000000000000', '0xBF80000000000000', '0xBF80000000000000', '0xBF80000000000000', '0xBF80000000000000', '0xBF80000000000000', 
              '0x287d8c15f97aadc9', '0x44b8289eee0b08d4', '0x32374a299b3ac7af', '0xd18bd69c3d9ffea1', '0xf2f31dae7be377b4', '0xf9c63a355a3a8772', '0xbde5879669cd8e4b', '0xcdfc6fdabb706ded', '0xbad2a80d351a6d23', '0x2e12df04b2caacd1', '0x4a200fb3148c5fe2', '0x655e624ed7c37ed4', '0x352badbc7cfe54db', '0x6207b7935a22fba2', '0x6a96cbf27b3a0572', '0x4b65fd0a17bd3219', '0x23df8a084bd80ea3', '0x38067c5dfce0c534', '0x50b384c812f63a4f', '0xd708334b155cb31e', '0x5110acded39aafec', '0x4ec9780717ace8d5', '0x1f738ac4f533d238', '0xf61eda23a016dda0', '0x0bab3447fb4e6cce', '0x49b2fd00d0dc615d', '0x6ec815a873d565c0', '0xd369ea28f3ceadde', '0xbecdf4b751bd2e47', '0xbfd4a5a6a160eed7', '0xc6270e3086c30969', '0xd025bc3393035915', '0x8862c0202789f9f7', '0xaf748dcb2185d65f', '0x39c3983a0aca4c12', '0x7d60d873f0f436f0', '0xc756fb6e9bdaa61a', '0xe8813727ffcc96c6', '0x8886824904e7f3f8', '0xb8cff1c60f6c4556', '0xd5485ef1cc713427', '0x1cc81cbf71411edb', '0xe385347f10a7b5ed', '0x24c3474548f5fb3f', '0xb6048afbec8d1642', '0xfec9fafae2ad486a', '0xf3add264ffc754bd', '0x689da73dca199361', '0xb48ea93363550db9', '0xf1d8822a449e806e', '0x7add0a7a31afc247', '0x5149f4e187992503', '0x9af729c3443ffe86', '0x25d12d059e08f51b', '0xd8a10962933e15bd', '0x5d67baf8fe198daf', '0x95b563a995fb5ba7', '0x0b32b9372fe0bce9', '0xeb337923a729e30f', '0xe9f053fcc032b1d6', '0x0c110ae733010d25', '0x0cd18f0969a599b1', '0x6d565e6b565b2ad1', '0xd892bfcd7ba31f17', 
              '0x029d713335ad1fae', '0x969db08e119eeecd', '0x47070d7289cb99e7', '0x128c793bf944f040', '0x366744c816113f1b', '0xf96029c769dd8c75', '0x9c5e141a77a6ceab', '0x73430efab67794c9', '0xa4ee1fe7cd8bb7de', '0x05185cdfe7c14986', '0x059c0f7c28036c22', '0x76c2ed076f96b993', '0xdfbd9b8ac0d0381b', '0x03df4a7f82c2a875', '0x2e56d77270ffade7', '0x71130ee0978174ac', '0x243033c7baaedaa1', '0xfdbf3d43027bf014', '0xdb3c9eb36f5fcab5', '0xa8de8618c219791a', '0xa96a7e2de60004f0', '0x01c76e77de85b197', '0x35dcc7648b63b812', '0x21114400c7c40593', '0xb8ec9e24ef7ccb27', '0xa55587f3dcede08b', '0xb26002aa1c740295', '0x57f573b19289946c', '0xc60c7f7301d69015', '0xf4b39b7e483fae55', '0x41cedfb82bf16bc9', '0xa17d9ea138fcfe1a', '0x1de6fc9e2ea32f49', '0x73d57af1656e0ec7', '0xe43b887d3732bf98', '0x9e382ec65643810b', '0x6dd32d73e1801926', '0xbebebd75835ccdc9', '0xbd5c9ef131730499', '0xd83f14c8bf8a2e1a', '0xc8715c308da43ea6', '0xab756d97d2740439', '0x0f95997b18ff7989', '0x086523549822ebd9', '0x9786199c71ffae32', '0xf8e9ea0f5ce6e606', '0xee4af8d45560c83f', '0x16db150c008ede0f', '0x44fae17fc3a3f94f', '0x4a121a27b290c0bc', '0xac4034571caeec15', '0x7045093f14d2fa9a', '0xbd98cba38abc05fe', '0xe3df0d85f8ef40df', '0x9d21173e2d4717bd', '0xc1884643063c00b9', '0x90ec89cbde233beb', '0xf18915693a6713df', '0xf3d65eeaed55d53d', '0xace7c6059b620bd7', '0x6942fc94e9909bb3', '0xd4d32cf62ea33ff8', '0x2a6876bc4ea19485', '0x62c4e0911702453b']
rs2_val_64 = ['0x0000000000000000', '0x8000000000000000', '0x0000000000000001', '0x8000000000000001', '0x0000000000000002', '0x8000000000000002', '0x000FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x0010000000000000', '0x8010000000000000', '0x0010000000000002', '0x8010000000000002', '0x7FEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0x3FF0000000000000', '0xBF80000000000000', '0x0000000000000000', '0x8000000000000000', '0x0000000000000001', '0x8000000000000001', '0x0000000000000002', '0x8000000000000002', '0x000FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x0010000000000000', '0x8010000000000000', '0x0010000000000002', '0x8010000000000002', '0x7FEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0x3FF0000000000000', '0xBF80000000000000', '0x0000000000000000', '0x8000000000000000', '0x0000000000000001', '0x8000000000000001', '0x0000000000000002', '0x8000000000000002', '0x000FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x0010000000000000', '0x8010000000000000', '0x0010000000000002', '0x8010000000000002', '0x7FEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0x3FF0000000000000', '0xBF80000000000000', '0x0000000000000000', '0x8000000000000000', '0x0000000000000001', '0x8000000000000001', '0x0000000000000002', '0x8000000000000002', '0x000FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x0010000000000000', '0x8010000000000000', '0x0010000000000002', '0x8010000000000002', '0x7FEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0x3FF0000000000000', '0xBF80000000000000',
              '0x0000000000000000', '0x8000000000000000', '0x0000000000000001', '0x8000000000000001', '0x0000000000000002', '0x8000000000000002', '0x000FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x0010000000000000', '0x8010000000000000', '0x0010000000000002', '0x8010000000000002', '0x7FEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0x3FF0000000000000', '0xBF80000000000000', '0x0000000000000000', '0x8000000000000000', '0x0000000000000001', '0x8000000000000001', '0x0000000000000002', '0x8000000000000002', '0x000FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x0010000000000000', '0x8010000000000000', '0x0010000000000002', '0x8010000000000002', '0x7FEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0x3FF0000000000000', '0xBF80000000000000', '0x0000000000000000', '0x8000000000000000', '0x0000000000000001', '0x8000000000000001', '0x0000000000000002', '0x8000000000000002', '0x000FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x0010000000000000', '0x8010000000000000', '0x0010000000000002', '0x8010000000000002', '0x7FEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0x3FF0000000000000', '0xBF80000000000000', '0x0000000000000000', '0x8000000000000000', '0x0000000000000001', '0x8000000000000001', '0x0000000000000002', '0x8000000000000002', '0x000FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x0010000000000000', '0x8010000000000000', '0x0010000000000002', '0x8010000000000002', '0x7FEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0x3FF0000000000000', '0xBF80000000000000',
              '0x0000000000000000', '0x8000000000000000', '0x0000000000000001', '0x8000000000000001', '0x0000000000000002', '0x8000000000000002', '0x000FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x0010000000000000', '0x8010000000000000', '0x0010000000000002', '0x8010000000000002', '0x7FEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0x3FF0000000000000', '0xBF80000000000000', '0x0000000000000000', '0x8000000000000000', '0x0000000000000001', '0x8000000000000001', '0x0000000000000002', '0x8000000000000002', '0x000FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x0010000000000000', '0x8010000000000000', '0x0010000000000002', '0x8010000000000002', '0x7FEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0x3FF0000000000000', '0xBF80000000000000', '0x0000000000000000', '0x8000000000000000', '0x0000000000000001', '0x8000000000000001', '0x0000000000000002', '0x8000000000000002', '0x000FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x0010000000000000', '0x8010000000000000', '0x0010000000000002', '0x8010000000000002', '0x7FEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0x3FF0000000000000', '0xBF80000000000000', '0x0000000000000000', '0x8000000000000000', '0x0000000000000001', '0x8000000000000001', '0x0000000000000002', '0x8000000000000002', '0x000FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x0010000000000000', '0x8010000000000000', '0x0010000000000002', '0x8010000000000002', '0x7FEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0x3FF0000000000000', '0xBF80000000000000',
              '0x0000000000000000', '0x8000000000000000', '0x0000000000000001', '0x8000000000000001', '0x0000000000000002', '0x8000000000000002', '0x000FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x0010000000000000', '0x8010000000000000', '0x0010000000000002', '0x8010000000000002', '0x7FEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0x3FF0000000000000', '0xBF80000000000000', '0x0000000000000000', '0x8000000000000000', '0x0000000000000001', '0x8000000000000001', '0x0000000000000002', '0x8000000000000002', '0x000FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x0010000000000000', '0x8010000000000000', '0x0010000000000002', '0x8010000000000002', '0x7FEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0x3FF0000000000000', '0xBF80000000000000', '0x0000000000000000', '0x8000000000000000', '0x0000000000000001', '0x8000000000000001', '0x0000000000000002', '0x8000000000000002', '0x000FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x0010000000000000', '0x8010000000000000', '0x0010000000000002', '0x8010000000000002', '0x7FEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0x3FF0000000000000', '0xBF80000000000000', '0x0000000000000000', '0x8000000000000000', '0x0000000000000001', '0x8000000000000001', '0x0000000000000002', '0x8000000000000002', '0x000FFFFFFFFFFFFF', '0x800FFFFFFFFFFFFF', '0x0010000000000000', '0x8010000000000000', '0x0010000000000002', '0x8010000000000002', '0x7FEFFFFFFFFFFFFF', '0xFFEFFFFFFFFFFFFF', '0x3FF0000000000000', '0xBF80000000000000', 
              '0x8c5fb19bc11df6bf', '0x513c9cc3a6d05c60', '0x6c1e50ea1c4c0904', '0xbcce36a4ea2e073c', '0xe93686ad573ac3ea', '0xab23e40ff9b44f35', '0x88345d514f0ed9b1', '0xe398452da7a322ce', '0xd9eace733df87393', '0xc81593dad9a0d54e', '0x1b809cf6332b2845', '0x69d97d5e8bcff755', '0x898622dcfff2d599', '0x70f978be54ed7687', '0x76b51fb5288a87c1', '0xaca8aba5b6787f82', '0x872ad316864f6302', '0x7f55b187ec3d34a2', '0xc9ba75a7a3204dd7', '0x6ae296496e39c63e', '0x693a26c4c15f26ff', '0x96df12c2783db4a2', '0x4c0d6288959ec61e', '0xf7bdcda44267bf4b', '0xb7704960b18a128a', '0xc9eb305ad26d0ec9', '0xc9ecc64ef8ccbcc4', '0x10d37eb2301af9a5', '0x6e1646940216d165', '0x1637d7cc103f5daa', '0x423b04bf9347445e', '0x487a9e340ecf662f', '0x3bd11c2a06c01b4a', '0x42a9731f38a94368', '0x4cc0a65525bf4b48', '0xf95d58ef93c687a8', '0x7ac8ef3fbe104ff0', '0xfa1f01c3e96acc82', '0x1f84c8b875692896', '0x39510d7797590b51', '0xc0dae30a0a277839', '0xb3772df99dafebd3', '0xdf0a6b16c24390b3', '0x0eed32ac19bd6e20', '0xa4516ecbe25b3735', '0x0513613798e408f9', '0x77c20ff03d74d279', '0x63495ea1c2b94cc0', '0xb0dde1fdc6d7d612', '0x04e933f72952c76f', '0xa016d951e41a8ae3', '0xb022688fe3db5627', '0x04f1569df0334d2b', '0xf78fea873d54d8c9', '0x48a6d6799ed158ae', '0xd0d56957c1f989ec', '0x507d42579f1b30c1', '0xbec601e6ac77700b', '0x5190cae6f85a8d23', '0x2e800b8886570168', '0x989ad11a146fa261', '0x7728f4a1abc957e1', '0x762d77aeca8aa81a', '0x18c4c857050e7a94',
              '0xe4683ee0be29f1e8', '0xa618026503b9801e', '0xd839aa2f24d575d6', '0xc0a0733ac0bb11c6', '0xdde5f8d6229c1737', '0x05151e912e7aae4c', '0xb463146f6d2a49d6', '0xf7da8ace0e0305fe', '0xab350651865a1ca5', '0x64a57112602ffde4', '0x27d5f04b71e61194', '0xf175ddae40ef0ceb', '0x28f9386871cc9153', '0x5a8e15e18bf63141', '0x17873cd77d5839f8', '0x02221aee03035d74', '0x0b6d73f969db55bb', '0x82e3f55d6fbbcc8b', '0xd93277512dd02ed3', '0xc55060831648976a', '0xdb4e496419d7ee82', '0x5f03d45f6fd1691a', '0x8d93c9b276b4bb61', '0xa989cce975309325', '0x00f99609771cf8d5', '0x2da6c11b9ec12bb7', '0xd087129a3f858e45', '0xb8556e88bc783450', '0x5a6c75cfe369b8fa', '0x5ddfdf6e75b0a91e', '0x06ecea8ee0bae841', '0x88498de5aaf179c1', '0x5abc5eac3031916e', '0xa161a79678c0adae', '0x097b9051bdb40772', '0xfc766f0c976b653a', '0x28b20ff760740be0', '0x57df4467c61fb6dd', '0x81e417514b3deeff', '0x5974407dddc651a0', '0x71cf238d90e9b6f5', '0x15b65c6f606a80eb', '0xd67891686486deb9', '0xf3b44ac722626d16', '0x52a44ef6bcfea4e9', '0xe183fdb8df660210', '0x42039f18e91b73ca', '0xa6003940f4e05aa6', '0x545fc4995e5d9392', '0xd7fe8a88618dd57e', '0x3cf73fd1210a504c', '0x00a36dcbab729d65', '0x4a78605ec8eb2a29', '0xad3df02237202a35', '0x8f9e6c24f1e1a7e4', '0xe3bb750487e8962a', '0xf06abb22fdabd911', '0xcea4b7ea01d1083e', '0x2af8c695b7ce6de6', '0xac11211c7677137b', '0x0598a363a1141ce6', '0xfcf7ec2f3b95f492', '0x10a995e3f56bbe06', '0x818e70a2e93fb6de']


def valid_aligned_regs(reg):
    i = reg // 8
    if i == 0 or i == 3:
        return 8, 16
    elif i == 1:
        return 16, 24
    else:
        return 24, 8


def generate_macros(f, vsew, lmul, test_vv=True, test_vf=True, test_rv=False):
    vlen = int(os.environ['RVV_ATG_VLEN'])
    vsew = int(os.environ['RVV_ATG_VSEW'])
    lmul = 1 if lmul < 1 else int(lmul)
    masked = True if os.environ['RVV_ATG_MASKED'] == "True" else False
    print("#undef TEST_FP_VV_OP \n\
#define TEST_FP_VV_OP( testnum, inst, flags, result, val1, val2 ) \\\n\
    TEST_CASE_LOOP_FP( testnum, v24, flags, result, v8,     \\\n\
        VSET_VSEW_4AVL \\\n\
        la x7, rd_origin_data; \\\n\
        vle%d.v v24, (x7);"%vsew + " \\\n\
        %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
        la x7, val1; \\\n\
        vle%d.v v8, (x7);"%vsew + " \\\n\
        la x7, val2; \\\n\
        vle%d.v v16, (x7);"%vsew + " \\\n\
        inst v24, v8, v16%s;"%(", v0.t" if masked else "") + " \\\n\
    )", file=f)

    print("#undef TEST_FP_VF_OP \n\
#define TEST_FP_VF_OP( testnum, inst, flags, result, val1, val2 ) \\\n\
    TEST_CASE_LOOP_FP( testnum, v24, flags, result, v8,    \\\n\
        VSET_VSEW_4AVL \\\n\
        la x7, rd_origin_data; \\\n\
        vle%d.v v24, (x7);"%vsew + " \\\n\
        %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
        la x7, val1; \\\n\
        vle%d.v v8, (x7); "%vsew + " \\\n\
        la x7, val2; \\\n\
        fl%s f1, (x7); "%('d' if vsew == 64 else 'w') + " \\\n\
        inst v24, v8, f1%s;"%(", v0.t" if masked else "") + " \\\n\
    )", file=f)
    if test_vv:
        for n in range(1, 32):
            if n % lmul != 0:
                continue
            rs2, rd = valid_aligned_regs(n)
            print("#define TEST_FP_VV_OP_1%d( testnum, inst, flags, result, val1, val2 ) \\\n\
            TEST_CASE_LOOP_FP( testnum, v%d, flags, result, v8, \\\n\
                VSET_VSEW_4AVL \\\n\
                la x7, rd_origin_data; \\\n\
                vle%d.v v%d, (x7); \\\n\
                %s "%(n, rd, vsew, rd, "la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
                la x7, val1; \\\n\
                vle%d.v v%d, (x7); \\\n\
                la x7, val2; \\\n\
                vle%d.v v%d, (x7); \\\n\
                inst v%d, v%d, v%d%s; \\\n\
            )" % (vsew, rs2, vsew, n, rd, rs2, n, ", v0.t" if masked else ""), file=f)
        for n in range(1, 32):
            if n % lmul != 0:
                continue
            rs1, rs2 = valid_aligned_regs(n)
            print("#define TEST_FP_VV_OP_rd%d( testnum, inst, flags, result, val1, val2 ) \\\n\
            TEST_CASE_LOOP_FP( testnum, v%d, flags, result, v8, \\\n\
                VSET_VSEW_4AVL \\\n\
                la x7, rd_origin_data; \\\n\
                vle%d.v v%d, (x7); \\\n\
                %s "%(n, n, vsew, n, "la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
                la x7, val1; \\\n\
                vle%d.v v%d, (x7); \\\n\
                la x7, val2; \\\n\
                vle%d.v v%d, (x7); \\\n\
                inst v%d, v%d, v%d%s; \\\n\
            )" % (vsew, rs2, vsew, rs1, n, rs2, rs1, ", v0.t" if masked else ""), file=f)
    if test_vf:
        for n in range(1,32):
            if n == 2 or n % lmul != 0:
                continue
            print("#define TEST_FP_VF_OP_rs1_%d( testnum, inst, flags, result, val1, val2 )"%n + " \\\n\
                TEST_CASE_LOOP_FP( testnum, v24, flags, result, v8,   \\\n\
                    VSET_VSEW_4AVL \\\n\
                    la x7, rd_origin_data; \\\n\
                    vle%d.v v24, (x7);"%vsew + " \\\n\
                    %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
                    la x7, val1; \\\n\
                    vle%d.v v8, (x7);"%(vsew) + " \\\n\
                    la x7, val2; \\\n\
                    fl%s f%d, (x7);"%(('d' if vsew == 64 else 'w'), n) + " \\\n\
                    inst v24, v8, f%d%s; "%(n, ", v0.t" if masked else "") + " \\\n\
                )", file=f)
        for n in range(1,32):
            if n == 1 or n % lmul != 0:
                continue
            print("#define TEST_FP_VF_OP_rd_%d( testnum, inst, flags, result, val1, val2 ) "%n + "\\\n\
            TEST_CASE_LOOP_FP( testnum, v%d, flags, result, v8, "%n + "    \\\n\
                VSET_VSEW_4AVL \\\n\
                la x7, rd_origin_data; \\\n\
                vle%d.v v%d, (x7);"%(vsew, n) + " \\\n\
                %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
                la x7, val1; \\\n\
                vle%d.v v8, (x7);"%(vsew) + " \\\n\
                la x7, val2; \\\n\
                fl%s f1, (x7);"%('d' if vsew == 64 else 'w') + " \\\n\
                inst v%d, v8, f1%s; "%(n, ", v0.t" if masked else "") +" \\\n\
            )", file=f)
    if test_rv:
        for n in range(1,32):
            if n ==14 or n % lmul != 0:
                continue
            print("#define TEST_FP_VF_OP_RV_rs1_%d( testnum, inst, flags, result, val1, val2 )"%n + " \\\n\
                TEST_CASE_FP( testnum, v24, flags, result, val1, val2,   \\\n\
                    fl%s f0, 0(a0); "%('d' if vsew == 64 else 'w') + "\\\n\
                    fl%s f1, 4(a0); "%('d' if vsew == 64 else 'w') + "\\\n\
                    vfmv.s.f v%d, f0; "%n + "\\\n\
                    fl%s f2, 8(a0); "%('d' if vsew == 64 else 'w') + "\\\n\
                    inst v24, f1, v%d; "%n + " \\\n\
                )", file=f)
        for n in range(1,32):
            if n == 1 or n == 8 or n % lmul != 0:
                continue
            print("#define TEST_FP_VF_OP_RV_rd_%d( testnum, inst, flags, result, val1, val2 ) "%n + "\\\n\
                TEST_CASE_FP( testnum, v%d, flags, result, val1, val2, "%n + "    \\\n\
                    fl%s f0, 0(a0); "%('d' if vsew == 64 else 'w') + "\\\n\
                    fl%s f1, 4(a0); "%('d' if vsew == 64 else 'w') + "\\\n\
                    vfmv.s.f v8, f0; \\\n\
                    fl%s f2, 8(a0);"%('d' if vsew == 64 else 'w') + " \\\n\
                    inst v%d, f1, v8; "%n +" \\\n\
                )", file=f)

def generate_macros_v_op(f, lmul):
    vlen = int(os.environ['RVV_ATG_VLEN'])
    vsew = int(os.environ['RVV_ATG_VSEW'])
    masked = True if os.environ['RVV_ATG_MASKED'] == "True" else False
    lmul = 1 if lmul < 1 else int(lmul)
    print("#undef TEST_FP_V_OP \n\
#define TEST_FP_V_OP( testnum, inst, flags, result, val1 ) \\\n\
    TEST_CASE_LOOP_FP( testnum, v24, flags, result, v8,     \\\n\
        VSET_VSEW_4AVL \\\n\
        la x7, rd_origin_data; \\\n\
        vle%d.v v24, (x7);"%vsew + " \\\n\
        %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
        la x7, val1; \\\n\
        vle%d.v v8, (x7);"%vsew + " \\\n\
        inst v24, v8%s;"%(", v0.t" if masked else "") + " \\\n\
    )", file=f)
    for n in range(1, 32):
        if n % lmul != 0 or n == 24:
            continue
        print("#define TEST_FP_V_OP_rs1_%d( testnum, inst, flags, result, val1 )"%n + " \\\n\
            TEST_CASE_LOOP_FP( testnum, v24, flags, result, v8, \\\n\
                VSET_VSEW_4AVL \\\n\
                la x7, rd_origin_data; \\\n\
                vle%d.v v24, (x7);"%vsew + " \\\n\
                %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
                la x7, val1; \\\n\
                vle%d.v v%d, (x7);"%(vsew, n) + " \\\n\
                inst v24, v%d%s; "%(n, ", v0.t" if masked else "") + " \\\n\
            )", file = f)

    for n in range(1, 32):
        if n % lmul != 0 or n == 8:
            continue
        print("#define TEST_FP_V_OP_rd_%d( testnum, inst, flags, result, val1 )"%n + " \\\n\
            TEST_CASE_LOOP_FP( testnum, v%d, flags, result, v8, "%n + " \\\n\
                VSET_VSEW_4AVL \\\n\
                la x7, rd_origin_data; \\\n\
                vle%d.v v%d, (x7);"%(vsew, n) + " \\\n\
                %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
                la x7, val1; \\\n\
                vle%d.v v8, (x7);"%(vsew) + " \\\n\
                inst v%d, v8%s; "%(n, ", v0.t" if masked else "") + " \\\n\
            )", file = f)

def generate_macros_vfmacc(f, vsew, lmul):
    vlen = int(os.environ['RVV_ATG_VLEN'])
    vsew = int(os.environ['RVV_ATG_VSEW'])
    lmul = 1 if lmul < 1 else int(lmul)
    masked = True if os.environ['RVV_ATG_MASKED'] == "True" else False
    print("#undef TEST_FP_VV_FUSED_OP \n\
#define TEST_FP_VV_FUSED_OP( testnum, inst, flags, result, val1, val2 ) \\\n\
    TEST_CASE_LOOP_FP( testnum, v24, flags, result, v8,     \\\n\
        VSET_VSEW_4AVL \\\n\
        la x7, val1; \\\n\
        vle%d.v v8, (x7);"%vsew + " \\\n\
        la x7, val2; \\\n\
        vle%d.v v16, (x7);"%vsew + " \\\n\
        la x7, rd_origin_data; \\\n\
        vle%d.v v24, (x7);"%(vsew) + " \\\n\
        %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
        inst v24, v8, v16%s;"%(", v0.t" if masked else "") + " \\\n\
    )", file=f)
    print("#undef TEST_FP_VF_FUSED_OP_RV \n\
#define TEST_FP_VF_FUSED_OP_RV( testnum, inst, flags, result, val1, val2 ) \\\n\
    TEST_CASE_LOOP_FP( testnum, v24, flags, result, v8,     \\\n\
        VSET_VSEW_4AVL \\\n\
        la x7, val1; \\\n\
        vle%d.v v8, (x7);"%vsew + " \\\n\
        la x7, val2; \\\n\
        fl%s f1, (x7);"%(('d' if vsew == 64 else 'w')) + " \\\n\
        la x7, rd_origin_data; \\\n\
        vle%d.v v24, (x7);"%(vsew) + " \\\n\
        %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
        inst v24, f1, v8%s;"%(", v0.t" if masked else "") + " \\\n\
    )", file=f)
    for n in range(1, 32):
        if n % lmul != 0:
            continue
        rs2, rd = valid_aligned_regs(n)
        print("#define TEST_FP_VV_FUSED_OP_1%d( testnum, inst, flags, result, val1, val2 )"%n + " \\\n\
            TEST_CASE_LOOP_FP( testnum, v%d, flags, result, v8,"%rd + " \\\n\
                VSET_VSEW_4AVL \\\n\
                la x7, val1; \\\n\
                vle%d.v v%d, (x7);"%(vsew, rs2) + " \\\n\
                la x7, val2; \\\n\
                vle%d.v v%d, (x7);"%(vsew, n) + " \\\n\
                la x7, rd_origin_data; \\\n\
                vle%d.v v%d, (x7);"%(vsew, rd) + " \\\n\
                %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
                inst v%d, v%d, v%d%s;"%(rd, rs2, n, ", v0.t" if masked else "") + " \\\n\
        )", file=f)
    for n in range(1, 32):
        if n % lmul != 0:
            continue
        rs1, rs2 = valid_aligned_regs(n)
        print("#define TEST_FP_VV_FUSED_OP_rd%d( testnum, inst, flags, result, val1, val2 ) "%n + "\\\n\
            TEST_CASE_LOOP_FP( testnum, v%d, flags, result, v8,"%n + " \\\n\
                VSET_VSEW_4AVL \\\n\
                la x7, val1; \\\n\
                vle%d.v v%d, (x7);"%(vsew, rs2) + " \\\n\
                la x7, val2; \\\n\
                vle%d.v v%d, (x7);"%(vsew, rs1) + " \\\n\
                la x7, rd_origin_data; \\\n\
                vle%d.v v%d, (x7);"%(vsew, n) + " \\\n\
                %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
                inst v%d, v%d, v%d%s;"%(n, rs2, rs1, ", v0.t" if masked else "") + " \\\n\
        )", file=f)
    # vf
    for n in range(1,32):
        if n == 2 or n % lmul != 0:
            continue
        print("#define TEST_FP_VF_FUSED_OP_RV_rs1_%d( testnum, inst, flags, result, val1, val2 )"%n + " \\\n\
            TEST_CASE_LOOP_FP( testnum, v24, flags, result, v8,   \\\n\
                VSET_VSEW_4AVL \\\n\
                la x7, val1; \\\n\
                vle%d.v v8, (x7);"%(vsew) + " \\\n\
                la x7, val2; \\\n\
                fl%s f%d, (x7);"%(('d' if vsew == 64 else 'w'), n) + " \\\n\
                la x7, rd_origin_data; \\\n\
                vle%d.v v24, (x7);"%(vsew) + " \\\n\
                %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
                inst v24, f%d, v8%s; "%(n, ", v0.t" if masked else "") + " \\\n\
            )", file=f)
    for n in range(1,32):
        if n == 1 or n % lmul != 0:
            continue
        print("#define TEST_FP_VF_FUSED_OP_RV_rd_%d( testnum, inst, flags, result, val1, val2 ) "%n + "\\\n\
        TEST_CASE_LOOP_FP( testnum, v%d, flags, result, v8, "%n + "    \\\n\
            VSET_VSEW_4AVL \\\n\
            la x7, val1; \\\n\
            vle%d.v v8, (x7);"%(vsew) + " \\\n\
            la x7, val2; \\\n\
            fl%s f1, (x7);"%('d' if vsew == 64 else 'w') + " \\\n\
            la x7, rd_origin_data; \\\n\
            vle%d.v v%d, (x7);"%(vsew, n) + " \\\n\
            %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
            inst v%d, f1, v8%s; "%(n, ", v0.t" if masked else "") + " \\\n\
        )", file=f)

def generate_macros_vfwmacc(f, vsew, lmul):
    vlen = int(os.environ['RVV_ATG_VLEN'])
    vsew = int(os.environ['RVV_ATG_VSEW'])
    lmul_1 = 1 if lmul < 1 else int(lmul)
    masked = True if os.environ['RVV_ATG_MASKED'] == "True" else False
    print("#undef TEST_FP_W_VV_FUSED_OP \n\
#define TEST_FP_W_VV_FUSED_OP( testnum, inst, flags, result, val1, val2 ) \\\n\
    TEST_CASE_LOOP_W_FP( testnum, v24, flags, result, v8,     \\\n\
        VSET_VSEW_4AVL \\\n\
        la x7, val1; \\\n\
        vle%d.v v8, (x7);"%vsew + " \\\n\
        la x7, val2; \\\n\
        vle%d.v v16, (x7);"%vsew + " \\\n\
        la x7, rd_origin_data; \\\n\
        vle%d.v v24, (x7);"%(vsew*2) + " \\\n\
        %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
        inst v24, v8, v16%s;"%(", v0.t" if masked else "") + " \\\n\
    )", file=f)
    print("#undef TEST_FP_W_VF_FUSED_OP_RV \n\
#define TEST_FP_W_VF_FUSED_OP_RV( testnum, inst, flags, result, val1, val2 ) \\\n\
    TEST_CASE_LOOP_W_FP( testnum, v24, flags, result, v8,     \\\n\
        VSET_VSEW_4AVL \\\n\
        la x7, val1; \\\n\
        vle%d.v v8, (x7);"%vsew + " \\\n\
        la x7, val2; \\\n\
        fl%s f1, (x7);"%(('d' if vsew == 64 else 'w')) + " \\\n\
        la x7, rd_origin_data; \\\n\
        vle%d.v v24, (x7);"%(vsew*2) + " \\\n\
        %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
        inst v24, f1, v8%s;"%(", v0.t" if masked else "") + " \\\n\
    )", file=f)
    for n in range(1, 32):
        if n % lmul != 0:
            continue
        rs2, rd = valid_aligned_regs(n)
        print("#define TEST_FP_W_VV_FUSED_OP_1%d( testnum, inst, flags, result, val1, val2 )"%n + " \\\n\
            TEST_CASE_LOOP_W_FP( testnum, v%d, flags, result, v8,"%rd + " \\\n\
                VSET_VSEW_4AVL \\\n\
                la x7, val1; \\\n\
                vle%d.v v%d, (x7);"%(vsew, rs2) + " \\\n\
                la x7, val2; \\\n\
                vle%d.v v%d, (x7);"%(vsew, n) + " \\\n\
                la x7, rd_origin_data; \\\n\
                vle%d.v v%d, (x7);"%(vsew*2, rd) + " \\\n\
                %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
                inst v%d, v%d, v%d%s;"%(rd, rs2, n, ", v0.t" if masked else "") + " \\\n\
        )", file=f)
    for n in range(1, 32):
        if n % lmul != 0:
            continue
        rs1, rs2 = valid_aligned_regs(n)
        print("#define TEST_FP_W_VV_FUSED_OP_rd%d( testnum, inst, flags, result, val1, val2 ) "%n + "\\\n\
            TEST_CASE_LOOP_W_FP( testnum, v%d, flags, result, v8,"%n + " \\\n\
                VSET_VSEW_4AVL \\\n\
                la x7, val1; \\\n\
                vle%d.v v%d, (x7);"%(vsew, rs2) + " \\\n\
                la x7, val2; \\\n\
                vle%d.v v%d, (x7);"%(vsew, rs1) + " \\\n\
                la x7, rd_origin_data; \\\n\
                vle%d.v v%d, (x7);"%(vsew*2, n) + " \\\n\
                %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
                inst v%d, v%d, v%d%s;"%(n, rs2, rs1, ", v0.t" if masked else "") + " \\\n\
        )", file=f)
    # vf
    for n in range(1,32):
        if n == 2 or n % lmul != 0:
            continue
        print("#define TEST_FP_W_VF_FUSED_OP_RV_rs1_%d( testnum, inst, flags, result, val1, val2 )"%n + " \\\n\
            TEST_CASE_LOOP_W_FP( testnum, v24, flags, result, v8,   \\\n\
                VSET_VSEW_4AVL \\\n\
                la x7, val1; \\\n\
                vle%d.v v8, (x7);"%(vsew) + " \\\n\
                la x7, val2; \\\n\
                fl%s f%d, (x7);"%(('d' if vsew == 64 else 'w'), n) + " \\\n\
                la x7, rd_origin_data; \\\n\
                vle%d.v v24, (x7);"%(vsew*2) + " \\\n\
                %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
                inst v24, f%d, v8%s;"%(n, ", v0.t" if masked else "") + " \\\n\
            )", file=f)
    for n in range(1,32):
        if n == 1 or n % lmul != 0:
            continue
        print("#define TEST_FP_W_VF_FUSED_OP_RV_rd_%d( testnum, inst, flags, result, val1, val2 ) "%n + "\\\n\
        TEST_CASE_LOOP_W_FP( testnum, v%d, flags, result, v8, "%n + "    \\\n\
            VSET_VSEW_4AVL \\\n\
            la x7, val1; \\\n\
            vle%d.v v8, (x7);"%(vsew) + " \\\n\
            la x7, val2; \\\n\
            fl%s f1, (x7);"%('d' if vsew == 64 else 'w') + " \\\n\
            la x7, rd_origin_data; \\\n\
            vle%d.v v%d, (x7);"%(vsew*2, n) + " \\\n\
            %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
            inst v%d, f1, v8%s;"%(n, ", v0.t" if masked else "") + " \\\n\
        )", file=f)

def generate_macros_vfred(f, vsew, lmul, test_vv=True, test_vf=True, test_rv=False):
    masked = True if os.environ['RVV_ATG_MASKED'] == "True" else False
    print("#define TEST_FPRED_VV_OP( testnum, inst, flags, result, val1, val2 ) \\\n\
        TEST_CASE_FP( testnum, v24, flags, result, val1, val2,    \\\n\
            fl%s f0, 0(a0); "%('d' if vsew == 64 else 'w') + "\\\n\
            fl%s f1, %d(a0); "%(('d' if vsew == 64 else 'w'), (8 if vsew == 64 else 4)) + "\\\n\
            vfmv.s.f v8, f0; \\\n\
            vfmv.s.f v16, f1; \\\n\
            fl%s f2, %d(a0); "%(('d' if vsew == 64 else 'w'), (16 if vsew == 64 else 8)) + "\\\n\
            inst v24, v8, v16%s;"%(", v0.t" if masked else "") + " \\\n\
        )", file=f)
    print("#define TEST_FPRED_VF_OP( testnum, inst, flags, result, val1, val2 ) \\\n\
        TEST_CASE_FP( testnum, v24, flags, result, val1, val2,    \\\n\
            fl%s f0, 0(a0); "%('d' if vsew == 64 else 'w') + "\\\n\
            fl%s f1, %d(a0); "%(('d' if vsew == 64 else 'w'), (8 if vsew == 64 else 4)) + "\\\n\
            vfmv.s.f v8, f0; \\\n\
            fl%s f2, %d(a0); "%(('d' if vsew == 64 else 'w'), (16 if vsew == 64 else 8)) + " \\\n\
            inst v24, v8, f1%s;"%(", v0.t" if masked else "") + " \\\n\
        )", file=f)
    # lmul = 1 if lmul < 1 else int(lmul)
    if test_vv:
        for n in range(1, 32):
            if n % lmul != 0:
                continue
            rs2, rd = valid_aligned_regs(n)
            print("#define TEST_FPRED_VV_OP_1%d( testnum, inst, flags, result, val1, val2 ) \\\n\
            TEST_CASE_FP( testnum, v%d, flags, result, val1, val2, \\\n\
                fl%s f0, 0(a0); \\\n\
                fl%s f1, %d(a0); \\\n\
                vfmv.s.f v%d, f0; \\\n\
                vfmv.s.f v%d, f1; \\\n\
                fl%s f2, %d(a0); \\\n\
                inst v%d, v%d, v%d%s; \\\n\
            )" % (n, rd, ('d' if vsew == 64 else 'w'), ('d' if vsew == 64 else 'w'), (8 if vsew == 64 else 4), rs2,  n, ('d' if vsew == 64 else 'w'), (16 if vsew == 64 else 8), rd, rs2, n, ", v0.t" if masked else ""), file=f)
        for n in range(1, 32):
            if n % lmul != 0:
                continue
            rs1, rs2 = valid_aligned_regs(n)
            print("#define TEST_FPRED_VV_OP_rd%d( testnum, inst, flags, result, val1, val2 ) \\\n\
            TEST_CASE_FP( testnum, v%d, flags, result, val1, val2, \\\n\
                fl%s f0, 0(a0); \\\n\
                fl%s f1, %d(a0); \\\n\
                vfmv.s.f v%d, f0; \\\n\
                vfmv.s.f v%d, f1; \\\n\
                fl%s f2, %d(a0); \\\n\
                inst v%d, v%d, v%d%s; \\\n\
            )" % (n,  n, ('d' if vsew == 64 else 'w'), ('d' if vsew == 64 else 'w'), (8 if vsew == 64 else 4), rs2, rs1, ('d' if vsew == 64 else 'w'), (16 if vsew == 64 else 8), n, rs2, rs1, ", v0.t" if masked else ""), file=f)
    if test_vf:
        for n in range(1,32):
            if n == 2 or n % lmul != 0:
                continue
            print("#define TEST_FPRED_VF_OP_rs1_%d( testnum, inst, flags, result, val1, val2 )"%n + " \\\n\
                TEST_CASE_FP( testnum, v24, flags, result, val1, val2,   \\\n\
                    fl%s f0, 0(a0); "%('d' if vsew == 64 else 'w') + "\\\n\
                    fl%s f%d, %d(a0);"%(('d' if vsew == 64 else 'w'), (8 if vsew == 64 else 4)) + " \\\n\
                    vfmv.s.f v8, f0; \\\n\
                    fl%s f2, %d(a0); "%(('d' if vsew == 64 else 'w'), (16 if vsew == 64 else 8)) + "\\\n\
                    inst v24, v8, f%d%s; "%(n,n, ", v0.t" if masked else "") + " \\\n\
                )", file=f)
        for n in range(1,32):
            if n == 1 or n % lmul != 0:
                continue
            print("#define TEST_FPRED_VF_OP_rd_%d( testnum, inst, flags, result, val1, val2 ) "%n + "\\\n\
            TEST_CASE_FP( testnum, v%d, flags, result, val1, val2,     \\\n\
                fl%s f0, 0(a0); "%('d' if vsew == 64 else 'w') + "\\\n\
                fl%s f1, %d(a0); "%(('d' if vsew == 64 else 'w'), (8 if vsew == 64 else 4)) + "\\\n\
                vfmv.s.f v8, f0; \\\n\
                fl%s f2, %d(a0); "%(('d' if vsew == 64 else 'w'), (16 if vsew == 64 else 8)) + "\\\n\
                inst v%d, v8, f1%s; "%(n, ", v0.t" if masked else "") +" \\\n\
            )", file=f)

def generate_macros_widen(f, lmul):
    vlen = int(os.environ['RVV_ATG_VLEN'])
    vsew = int(os.environ['RVV_ATG_VSEW'])
    lmul_1 = 1 if lmul < 1 else int(lmul)
    masked = True if os.environ['RVV_ATG_MASKED'] == "True" else False
    
    print("#undef TEST_W_FP_VV_OP \n\
#define TEST_W_FP_VV_OP( testnum, inst, flags, result, val1, val2 ) \\\n\
    TEST_CASE_LOOP_W_FP( testnum, v24, flags, result, v8,     \\\n\
        VSET_VSEW_4AVL \\\n\
        la x7, rd_origin_data; \\\n\
        vle%d.v v24, (x7);"%(vsew*2 if vsew < 64 else 64) + " \\\n\
        %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
        la x7, val1; \\\n\
        vle%d.v v8, (x7);"%vsew + " \\\n\
        la x7, val2; \\\n\
        vle%d.v v16, (x7);"%vsew + " \\\n\
        inst v24, v8, v16%s;"%(", v0.t" if masked else "") + " \\\n\
    )", file=f)

    print("#undef TEST_W_FP_VF_OP \n\
#define TEST_W_FP_VF_OP( testnum, inst, flags, result, val1, val2 ) \\\n\
    TEST_CASE_LOOP_W_FP( testnum, v24, flags, result, v8,    \\\n\
        VSET_VSEW_4AVL \\\n\
        la x7, rd_origin_data; \\\n\
        vle%d.v v24, (x7);"%(vsew*2 if vsew < 64 else 64) + " \\\n\
        %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
        la x7, val1; \\\n\
        vle%d.v v8, (x7); "%vsew + " \\\n\
        la x7, val2; \\\n\
        fl%s f1, (x7); "%('d' if vsew == 64 else 'w') + " \\\n\
        inst v24, v8, f1%s;"%(", v0.t" if masked else "") + " \\\n\
    )", file=f)

    print("#undef TEST_W_FP_WV_OP \n\
#define TEST_W_FP_WV_OP( testnum, inst, flags, result, val1, val2 ) \\\n\
    TEST_CASE_LOOP_W_FP( testnum, v24, flags, result, v8,     \\\n\
        VSET_VSEW_4AVL \\\n\
        la x7, rd_origin_data; \\\n\
        vle%d.v v24, (x7);"%(vsew*2 if vsew < 64 else 64) + " \\\n\
        %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
        la x7, val1; \\\n\
        vle%d.v v8, (x7);"%(vsew*2 if vsew < 64 else 64) + " \\\n\
        la x7, val2; \\\n\
        vle%d.v v16, (x7);"%vsew + " \\\n\
        inst v24, v8, v16%s;"%(", v0.t" if masked else "") + " \\\n\
    )", file=f)

    print("#undef TEST_W_FP_WF_OP \n\
#define TEST_W_FP_WF_OP( testnum, inst, flags, result, val1, val2 ) \\\n\
    TEST_CASE_LOOP_W_FP( testnum, v24, flags, result, v8,    \\\n\
        VSET_VSEW_4AVL \\\n\
        la x7, rd_origin_data; \\\n\
        vle%d.v v24, (x7);"%(vsew*2 if vsew < 64 else 64) + " \\\n\
        %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
        la x7, val1; \\\n\
        vle%d.v v8, (x7); "%(vsew*2 if vsew < 64 else 64) + " \\\n\
        la x7, val2; \\\n\
        fl%s f1, (x7); "%('d' if vsew == 64 else 'w') + " \\\n\
        inst v24, v8, f1%s;"%(", v0.t" if masked else "") + " \\\n\
    )", file=f)

    # lmul = 1 if lmul < 1 else int(lmul)
    for n in range(1, 32):
        if n % lmul != 0:
            continue
        rs2, rd = valid_aligned_regs(n)
        print("#define TEST_W_FP_VV_OP_1%d( testnum, inst, flags, result, val1, val2 ) \\\n\
        TEST_CASE_LOOP_W_FP( testnum, v%d, flags, result, v8, \\\n\
            VSET_VSEW_4AVL \\\n\
            la x7, rd_origin_data; \\\n\
            vle%d.v v%d, (x7); \\\n\
            %s "%(n, rd, vsew*2 if vsew < 64 else 64, rd,  "la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
            la x7, val1; \\\n\
            vle%d.v v%d, (x7); \\\n\
            la x7, val2; \\\n\
            vle%d.v v%d, (x7); \\\n\
            inst v%d, v%d, v%d%s; \\\n\
        )" % (vsew, rs2, vsew, n, rd, rs2, n, ", v0.t" if masked else ""), file=f)
    for n in range(1, 32):
        if n % (2*lmul) != 0:
            continue
        rs1, rs2 = valid_aligned_regs(n)
        print("#define TEST_W_FP_VV_OP_rd%d( testnum, inst, flags, result, val1, val2 ) \\\n\
        TEST_CASE_LOOP_W_FP( testnum, v%d, flags, result, v8, \\\n\
            VSET_VSEW_4AVL \\\n\
            la x7, rd_origin_data; \\\n\
            vle%d.v v%d, (x7); \\\n\
            %s "%(n, n, vsew*2 if vsew < 64 else 64, n, "la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
            la x7, val1; \\\n\
            vle%d.v v%d, (x7); \\\n\
            la x7, val2; \\\n\
            vle%d.v v%d, (x7); \\\n\
            inst v%d, v%d, v%d%s; \\\n\
        )" % (vsew, rs2, vsew, rs1, n, rs2, rs1, ", v0.t" if masked else ""), file=f)


def generate_macros_widen_rs2(f, lmul):
    # lmul = 1 if lmul < 1 else int(lmul)
    for n in range(1, 32):
        if n % lmul != 0:
            continue
        rs1, rd = valid_aligned_regs(n)
        print("#define TEST_W_FP_VV_OP_2%d( testnum, inst, finst, flags, val1, val2 ) \\\n\
        TEST_CASE_W_FP( testnum, v%d, flags, val1, val2, \\\n\
            flw f0, 0(a0); \\\n\
            flw f1, 4(a0); \\\n\
            vfmv.s.f v%d, f0; \\\n\
            vfmv.s.f v%d, f1; \\\n\
            fcvt.d.s f0, f0; \\\n\
            fcvt.d.s f1, f1; \\\n\
            finst f2, f0, f1; \\\n\
            VSET_VSEW_4AVL \\\n\
            vmv.v.i v%d, 0; \\\n\
            VSET_VSEW \\\n\
            inst v%d, v%d, v%d; \\\n\
        )" % (n, rd, rs1, n, rd, rd, rs1, n), file=f)
    for n in range(1, 32):
        if n % (2*lmul) != 0:
            continue
        rs1, rs2 = valid_aligned_regs(n)
        print("#define TEST_W_FP_VV_OP_rd%d( testnum, inst, finst, flags, val1, val2 ) \\\n\
        TEST_CASE_W_FP( testnum, v%d, flags, val1, val2, \\\n\
            flw f0, 0(a0); \\\n\
            flw f1, 4(a0); \\\n\
            vfmv.s.f v%d, f0; \\\n\
            vfmv.s.f v%d, f1; \\\n\
            fcvt.d.s f0, f0; \\\n\
            fcvt.d.s f1, f1; \\\n\
            finst f2, f0, f1; \\\n\
            VSET_VSEW_4AVL \\\n\
            vmv.v.i v%d, 0; \\\n\
            VSET_VSEW \\\n\
            inst v%d, v%d, v%d; \\\n\
        )" % (n, n, rs1, rs2, n, n, rs1, rs2), file=f)


def generate_macros_widen_rs2_neg(f, lmul):
    # lmul = 1 if lmul < 1 else int(lmul)
    for n in range(1, 32):
        if n % lmul != 0:
            continue
        rs1, rd = valid_aligned_regs(n)
        print("#define TEST_W_FP_VV_OP_NEGRESULT_2%d( testnum, inst, finst, flags, val1, val2 ) \\\n\
        TEST_CASE_W_FP( testnum, v%d, flags, val1, val2, \\\n\
            flw f0, 0(a0); \\\n\
            flw f1, 4(a0); \\\n\
            vfmv.s.f v%d, f0; \\\n\
            vfmv.s.f v%d, f1; \\\n\
            fcvt.d.s f0, f0; \\\n\
            fcvt.d.s f1, f1; \\\n\
            finst f2, f0, f1; \\\n\
            fneg.d f2, f2; \\\n\
            VSET_VSEW_4AVL \\\n\
            vmv.v.i v%d, 0; \\\n\
            VSET_VSEW \\\n\
            inst v%d, v%d, v%d; \\\n\
        )" % (n, rd, rs1, n, rd, rd, rs1, n), file=f)
    for n in range(1, 32):
        if n % (2*lmul) != 0:
            continue
        rs1, rs2 = valid_aligned_regs(n)
        print("#define TEST_W_FP_VV_OP_NEGRESULT_rd%d( testnum, inst, finst, flags, val1, val2 ) \\\n\
        TEST_CASE_W_FP( testnum, v%d, flags, val1, val2, \\\n\
            flw f0, 0(a0); \\\n\
            flw f1, 4(a0); \\\n\
            vfmv.s.f v%d, f0; \\\n\
            vfmv.s.f v%d, f1; \\\n\
            fcvt.d.s f0, f0; \\\n\
            fcvt.d.s f1, f1; \\\n\
            finst f2, f0, f1; \\\n\
            fneg.d f2, f2; \\\n\
            VSET_VSEW_4AVL \\\n\
            vmv.v.i v%d, 0; \\\n\
            VSET_VSEW \\\n\
            inst v%d, v%d, v%d; \\\n\
        )" % (n, n, rs1, rs2, n, n, rs1, rs2), file=f)

def generate_macros_vvmvfm(f, lmul, test_vv = True):
    lmul_1 = 1 if lmul < 1 else int(lmul)
    vlen = int(os.environ['RVV_ATG_VLEN'])
    vsew = int(os.environ['RVV_ATG_VSEW'])
    masked = True if os.environ['RVV_ATG_MASKED'] == "True" else False
    # generate vv
    if test_vv:
        print("#undef TEST_VVM_OP \n\
    #define TEST_VVM_OP( testnum, inst, result, flags, val1, val2 ) \\\n\
            TEST_CASE_MASK_FP_4VL( testnum, v24, flags, result, \\\n\
                VSET_VSEW_4AVL \\\n\
                la x7, rd_origin_data; \\\n\
                vle%d.v v24, (x7);"%vsew + " \\\n\
                %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
                la x7, val1; \\\n\
                vle%d.v v8, (x7);"%vsew + " \\\n\
                la x7, val2; \\\n\
                vle%d.v v16, (x7);"%vsew + " \\\n\
                inst v24, v8, v16%s; "%(", v0.t" if masked else "") + " \\\n\
            )", file=f)
        for n in range(1, 32):
            if n == 8 or n == 16 or n == 24 or n % lmul != 0:
                continue
            print("#define TEST_VVM_OP_1%d( testnum, inst, result, flags, val2, val1 )"%n + " \\\n\
                TEST_CASE_MASK_FP_4VL( testnum, v24, flags, result, \\\n\
                VSET_VSEW_4AVL \\\n\
                la x7, rd_origin_data; \\\n\
                vle%d.v v24, (x7);"%vsew + " \\\n\
                %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
                la x7, val1; \\\n\
                vle%d.v v8, (x7);"%vsew + " \\\n\
                la x7, val2; \\\n\
                vle%d.v v%d, (x7);"%(vsew, n) + " \\\n\
                inst v24, v8, v%d%s; "%(n, (", v0.t" if masked else "")) + " \\\n\
            )", file=f)
        for n in range(1, 32):
            if n == 8 or n == 16 or n == 24 or n % (lmul * 2) != 0:
                continue
            # Beacuse of the widening instruction, rd should valid for the destination’s EMUL
            print("#define TEST_VVM_OP_rd%d( testnum, inst, result, flags, val2, val1 )"%n + " \\\n\
            TEST_CASE_MASK_FP_4VL( testnum, v%d, flags, result, "%n + "\\\n\
                VSET_VSEW_4AVL \\\n\
                la x7, rd_origin_data; \\\n\
                vle%d.v v%d, (x7);"%(vsew, n) + " \\\n\
                %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
                la x7, val1; \\\n\
                vle%d.v v8, (x7);"%vsew + " \\\n\
                la x7, val2; \\\n\
                vle%d.v v16, (x7);"%vsew + " \\\n\
                inst v%d, v8, v16%s; "%(n, (", v0.t" if masked else "")) + "\\\n\
            ) ", file=f)
        print("#define TEST_VVM_OP_rd8( testnum, inst, result, flags, val2, val1 ) \\\n\
            TEST_CASE_MASK_FP_4VL( testnum, v8, flags, result, \\\n\
                VSET_VSEW_4AVL \\\n\
                la x7, rd_origin_data; \\\n\
                vle%d.v v8, (x7);"%vsew + " \\\n\
                %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
                la x7, val1; \\\n\
                vle%d.v v24, (x7);"%vsew + " \\\n\
                la x7, val2; \\\n\
                vle%d.v v16, (x7);"%vsew + " \\\n\
                inst v8, v24, v16%s; "%(", v0.t" if masked else "") + " \\\n\
            )", file=f)
        print("#define TEST_VVM_OP_rd16( testnum, inst, result, flags, val2, val1 ) \\\n\
            TEST_CASE_MASK_FP_4VL( testnum, v16, flags, result, \\\n\
                VSET_VSEW_4AVL \\\n\
                la x7, rd_origin_data; \\\n\
                vle%d.v v16, (x7);"%vsew + " \\\n\
                %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
                la x7, val1; \\\n\
                vle%d.v v24, (x7);"%vsew + " \\\n\
                la x7, val2; \\\n\
                vle%d.v v8, (x7);"%vsew + " \\\n\
                inst v16, v24, v8%s; "%(", v0.t" if masked else "") + " \\\n\
            )", file=f)
    # generrate vf
    print("#undef TEST_VXM_OP \n\
#define TEST_VXM_OP( testnum, inst, result, flags, val1, val2 ) \\\n\
        TEST_CASE_MASK_FP_4VL( testnum, v24, flags, result, \\\n\
            VSET_VSEW_4AVL \\\n\
            la x7, rd_origin_data; \\\n\
            vle%d.v v24, (x7);"%vsew + " \\\n\
            %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
            la x7, val1; \\\n\
            vle%d.v v8, (x7);"%vsew + " \\\n\
            la x7, val2; \\\n\
            fl%s f1, (x7);"%(('d' if vsew == 64 else 'w')) + " \\\n\
            inst v24, v8, f1%s; "%(", v0.t" if masked else "") + " \\\n\
        )", file=f)
    for n in range(1, 32):
        print("#define TEST_VXM_OP_1%d( testnum, inst, result, flags, val1, val2 ) "%n + " \\\n\
        TEST_CASE_MASK_FP_4VL( testnum, v24, flags, result,  \\\n\
            VSET_VSEW_4AVL \\\n\
            la x7, rd_origin_data; \\\n\
            vle%d.v v24, (x7);"%vsew + " \\\n\
            %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
            la x7, val1; \\\n\
            vle%d.v v8, (x7);"%vsew + " \\\n\
            la x7, val2; \\\n\
            fl%s f%d, (x7);"%(('d' if vsew == 64 else 'w'), n) + " \\\n\
            inst v24, v8, f%d%s; "%(n, (", v0.t" if masked else "")) + " \\\n\
        )", file=f)
    for n in range(1, 32):
        print("#define TEST_VXM_OP_rd%d( testnum, inst, result, flags, val1, val2 ) "%n + " \\\n\
        TEST_CASE_MASK_FP_4VL( testnum, v%d, flags, result, "%n + "\\\n\
            VSET_VSEW_4AVL \\\n\
            la x7, rd_origin_data; \\\n\
            vle%d.v v%d, (x7);"%(vsew, n) + " \\\n\
            %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
            la x7, val1; \\\n\
            vle%d.v v8, (x7);"%vsew + " \\\n\
            la x7, val2; \\\n\
            fl%s f1, (x7);"%(('d' if vsew == 64 else 'w')) + " \\\n\
            inst v%d, v8, f1%s; "%(n, (", v0.t" if masked else "")) + " \\\n\
        ) ", file=f)
    print("#define TEST_VXM_OP_rd8( testnum, inst, result, flags, val1, val2 ) \\\n\
        TEST_CASE_MASK_FP_4VL( testnum, v8, flags, result, \\\n\
            VSET_VSEW_4AVL \\\n\
            la x7, rd_origin_data; \\\n\
            vle%d.v v8, (x7);"%vsew + " \\\n\
            %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
            la x7, val1; \\\n\
            vle%d.v v16, (x7);"%vsew + " \\\n\
            la x7, val2; \\\n\
            fl%s f1, (x7);"%(('d' if vsew == 64 else 'w')) + " \\\n\
            inst v8, v16, f1%s; "%(", v0.t" if masked else "") + " \\\n\
        )", file=f)
    print("#define TEST_VXM_OP_rd16( testnum, inst, result, flags, val1, val2 ) \\\n\
        TEST_CASE_MASK_FP_4VL( testnum, v24, flags, result, \\\n\
            VSET_VSEW_4AVL \\\n\
            la x7, rd_origin_data; \\\n\
            vle%d.v v24, (x7);"%vsew + " \\\n\
            %s "%("la x7, mask_data; \\\n    vle%d.v v0, (x7); \\\n  "%vsew if masked else "")+" \
            la x7, val1; \\\n\
            vle%d.v v8, (x7);"%vsew + " \\\n\
            la x7, val2; \\\n\
            fl%s f1, (x7);"%(('d' if vsew == 64 else 'w')) + " \\\n\
            inst v24, v8, f1%s; "%(", v0.t" if masked else "") + " \\\n\
        )", file=f)

def generate_tests(instr, f, vsew, lmul, suffix="vv", test_vv=True, test_vf=True, test_rv=False):
    # lmul = 1 if lmul < 1 else int(lmul)
    vlen = int(os.environ['RVV_ATG_VLEN'])
    vsew = int(os.environ['RVV_ATG_VSEW'])
    global rs1_val, rs2_val, rs1_val_64, rs2_val_64
    if vsew == 64:
        rs1_val = rs1_val_64
        rs2_val = rs2_val_64

    if instr == "vfdiv" or instr == "vfrdiv" or instr == "vfrec7":
        # For the divison instruction, the operands cannot be zero
        # So we need to delete it
        while (rs1_val.count("0x00000000")):
            rs1_val.remove("0x00000000")
        while (rs2_val.count("0x00000000")):
            rs2_val.remove("0x00000000")

        # `0x80000000` is represented as `-0` in floating point
        # So we need to delete it
        while (rs1_val.count("0x80000000")):
            rs1_val.remove("0x80000000")
        while (rs2_val.count("0x80000000")):
            rs2_val.remove("0x80000000")

        # For the divison instruction, the operands cannot be zero
        # So we need to delete it
        while (rs1_val.count("0x0000000000000000")):
            rs1_val.remove("0x0000000000000000")
        while (rs2_val.count("0x0000000000000000")):
            rs2_val.remove("0x0000000000000000")

        # `0x8000000000000000` is represented as `-0` in floating point
        # So we need to delete it
        while (rs1_val.count("0x8000000000000000")):
            rs1_val.remove("0x8000000000000000")
        while (rs2_val.count("0x8000000000000000")):
            rs2_val.remove("0x8000000000000000")

    lmul_1 = 1 if lmul < 1 else int(lmul)
    n = 0

    num_elem = int((vlen * lmul / vsew))
    if num_elem == 0:
        return (0,0,0)
    loop_num = int(min(len(rs1_val), len(rs2_val)) / num_elem)
    step_bytes = int(vlen * lmul / 8)
    
    if test_vv:
        print("  #-------------------------------------------------------------", file=f)
        print("  # VV Tests", file=f)
        print("  #-------------------------------------------------------------", file=f)
        print("  RVTEST_SIGBASE( x12,signature_x12_1)", file=f)
        for i in range(loop_num):
            n += 1
            print("TEST_FP_VV_OP( %d,  %s.%s, 0xff100, rd_data_vv+%d, rs2_data+%d, rs1_data+%d);" % (
                n, instr, suffix, i*step_bytes, i*step_bytes, i*step_bytes), file=f)

        print("  #-------------------------------------------------------------", file=f)
        print("  # VV Tests (different register)", file=f)
        print("  #-------------------------------------------------------------", file=f)
        print("  RVTEST_SIGBASE( x12,signature_x12_1)", file=f)
        for i in range(min(32, loop_num)):
            k = i % 31 + 1
            if k == 8 or k == 16 or k == 24 or k % lmul != 0:
                continue
            n += 1
            print("  TEST_FP_VV_OP_rd%d( " % k+str(n)+",  %s.%s, 0xff100, " %
                  (instr, suffix)+"rd_data_vv+%d, rs2_data+%d, rs1_data+%d);"%(i*step_bytes, i*step_bytes, i*step_bytes), file=f)
            n += 1
            print("  TEST_FP_VV_OP_1%d( " % k+str(n)+",  %s.%s, 0xff100, " %
                  (instr, suffix)+"rd_data_vv+%d, rs2_data+%d, rs1_data+%d);"%(i*step_bytes, i*step_bytes, i*step_bytes), file=f)
    vv_test_num = n
    
    if test_vf:
        print("  #-------------------------------------------------------------", file=f)
        print("  # VF Tests", file=f)
        print("  #-------------------------------------------------------------", file=f)
        print("  RVTEST_SIGBASE( x20,signature_x20_1)", file=f)
        for i in range(loop_num):
            n += 1
            print("TEST_FP_VF_OP( %d,  %s.vf, 0xff100, rd_data_vf+%d, rs2_data+%d, rs1_data+%d);" % (
                n, instr, i*step_bytes, i*step_bytes, i*step_bytes), file=f)

        print("  #-------------------------------------------------------------",file=f)
        print("  # VF Tests (different register)",file=f)
        print("  #-------------------------------------------------------------",file=f)
        print("  RVTEST_SIGBASE( x20,signature_x20_1)",file=f)
        for i in range(min(32, loop_num)):     
            k = i%31+1        
            if k == 1 or k == 8 or k == 16 or k == 24 or k % lmul != 0:
                continue  
            n += 1
            print("  TEST_FP_VF_OP_rd_%d( "%k+str(n)+",  %s.vf, 0xff100, "%instr+"rd_data_vf+%d, rs2_data+%d, rs1_data+%d);" % (i*step_bytes, i*step_bytes, i*step_bytes),file=f)
            
            k = i%31+1
            if k == 2 or k % lmul != 0:
                continue        
            n += 1
            print("  TEST_FP_VF_OP_rs1_%d( "%k+str(n)+",  %s.vf, 0xff100, "%instr+"rd_data_vf+%d, rs2_data+%d, rs1_data+%d);" % (i*step_bytes, i*step_bytes, i*step_bytes),file=f)
    vf_test_num = n - vv_test_num

    if test_rv:
        print("  #-------------------------------------------------------------", file=f)
        print("  # VF Tests", file=f)
        print("  #-------------------------------------------------------------", file=f)
        print("  RVTEST_SIGBASE( x20,signature_x20_1)", file=f)
        for i in range(loop_num):
            n += 1
            print("TEST_FP_VF_OP_RV( %d,  %s.vf, 0xff100,               5201314,        %s,        %s );" % (
                n, instr, rs1_val[i], rs2_val[i]), file=f)

        print("  #-------------------------------------------------------------",file=f)
        print("  # VF Tests (different register)",file=f)
        print("  #-------------------------------------------------------------",file=f)
        print("  RVTEST_SIGBASE( x12,signature_x12_1)",file=f)
        for i in range(min(32, loop_num)):
            k = i%31+1
            if k == 1 or k == 8 or k == 16 or k == 24 or k % lmul != 0:
                continue
            n += 1
            print("  TEST_FP_VF_OP_RV_rd_%d( "%k+str(n)+",  %s.vf, 0xff100, "%instr+"5201314"+", "+rs1_val[i]+", "+rs2_val[i]+" );",file=f)

            k = i%31+1
            if k == 14 or k % lmul != 0:
                continue
            n += 1
            print("  TEST_FP_VF_OP_RV_rs1_%d( "%k+str(n)+",  %s.vf, 0xff100, "%instr+"5201314"+", "+rs1_val[i]+", "+rs2_val[i]+" );",file=f)
    rv_test_num = n - vf_test_num - vv_test_num
    
    return (vv_test_num, vf_test_num, rv_test_num)

def generate_tests_v_op(instr, f, lmul):
    vlen = int(os.environ['RVV_ATG_VLEN'])
    vsew = int(os.environ['RVV_ATG_VSEW'])
    global rs1_val, rs2_val, rs1_val_64, rs2_val_64
    
    rs1_val_local = rs1_val
    rs2_val_local = rs2_val
    if vsew == 64:
        rs1_val_local = rs1_val_64
        rs2_val_local = rs2_val_64
    rs1_val_local = list((rs1_val_local))
    rs2_val_local = list((rs2_val_local))
    if instr == "vfdiv" or instr == "vfrdiv" or instr == "vfrec7":
        # For the divison instruction, the operands cannot be zero
        # So we need to delete it
        while (rs1_val.count("0x00000000")):
            rs1_val.remove("0x00000000")
        while (rs2_val.count("0x00000000")):
            rs2_val.remove("0x00000000")

        # `0x80000000` is represented as `-0` in floating point
        # So we need to delete it
        while (rs1_val.count("0x80000000")):
            rs1_val.remove("0x80000000")
        while (rs2_val.count("0x80000000")):
            rs2_val.remove("0x80000000")

        # For the divison instruction, the operands cannot be zero
        # So we need to delete it
        while (rs1_val.count("0x0000000000000000")):
            rs1_val.remove("0x0000000000000000")
        while (rs2_val.count("0x0000000000000000")):
            rs2_val.remove("0x0000000000000000")

        # `0x8000000000000000` is represented as `-0` in floating point
        # So we need to delete it
        while (rs1_val.count("0x8000000000000000")):
            rs1_val.remove("0x8000000000000000")
        while (rs2_val.count("0x8000000000000000")):
            rs2_val.remove("0x8000000000000000")

    if instr == "vfclass":
        if vsew == 32:
            rs1_val_local = rs1_val_local + finf_and_nan
            rs2_val_local = rs2_val_local + finf_and_nan
        else:
            rs1_val_local = rs1_val_local + dinf_and_nan
            rs2_val_local = rs2_val_local + dinf_and_nan
        
    lmul_1 = 1 if lmul < 1 else int(lmul)
    n = 0
    
    num_elem = int((vlen * lmul / vsew))
    if num_elem == 0:
        return (0,0,0)
    loop_num = int(min(len(rs1_val_local), len(rs2_val_local)) / num_elem)
    step_bytes = int(vlen * lmul / 8)
    
    print("  #-------------------------------------------------------------",file=f)
    print("  # vfclass.v Tests",file=f)
    print("  #-------------------------------------------------------------",file=f)
    print("  RVTEST_SIGBASE( x12,signature_x12_1)",file=f)
    for i in range(loop_num):        
        print("TEST_FP_V_OP( %d,  %s.v, 0xff100, "%(n, instr) + "rd_data_vv+%d, rs1_data+%d);"%(i*step_bytes, i*step_bytes), file=f)
        n += 1
    
    print("  #-------------------------------------------------------------",file=f)
    print("  # vfclass.v Tests (different register)",file=f)
    print("  #-------------------------------------------------------------",file=f)
    print("  RVTEST_SIGBASE( x12,signature_x12_1)",file=f)

    for i in range(min(32, loop_num)):
        k = i % 31 + 1  
        if k % lmul != 0 or k == 8:
            continue
        print("  TEST_FP_V_OP_rd_%d( "%k+str(n)+",  %s.v, 0xff100, rd_data_vv+%d, rs1_data+%d);"%(instr, i*step_bytes, i*step_bytes),file=f)
        n += 1

        k = i % 31 + 1
        if k % lmul != 0 or k == 24:
            continue
        print("  TEST_FP_V_OP_rs1_%d( "%k+str(n)+",  %s.v, 0xff100, rd_data_vv+%d, rs1_data+%d);"%(instr, i*step_bytes, i*step_bytes),file=f)
        n += 1
    return (n, 0, 0)



def generate_tests_vfmacc(instr, f, vsew, lmul):
    vlen = int(os.environ['RVV_ATG_VLEN'])
    vsew = int(os.environ['RVV_ATG_VSEW'])
    global rs1_val, rs2_val, rs1_val_64, rs2_val_64
    if vsew == 64:
        rs1_val = rs1_val_64
        rs2_val = rs2_val_64
    rs1_val = list(set(rs1_val))
    rs2_val = list(set(rs2_val))
    lmul_1 = 1 if lmul < 1 else int(lmul)
    n = 0
    num_elem = int((vlen * lmul / vsew))
    if num_elem == 0:
        return (0,0,0)
    loop_num = int(min(len(rs1_val), len(rs2_val)) / num_elem)
    step_bytes = int(vlen * lmul / 8)
 
    # VV
    print("  #-------------------------------------------------------------", file=f)
    print("  # VV Tests", file=f)
    print("  #-------------------------------------------------------------", file=f)
    print("  RVTEST_SIGBASE( x12,signature_x12_1)", file=f)
    for i in range(loop_num):
        n += 1
        print("TEST_FP_VV_FUSED_OP( %d,  %s.vv, 0xff100,  rd_data_vv+%d, rs2_data+%d, rs1_data+%d);" % (
            n, instr, i*step_bytes, i*step_bytes, i*step_bytes), file=f)

    print("  #-------------------------------------------------------------", file=f)
    print("  # VV Tests (different register)", file=f)
    print("  #-------------------------------------------------------------", file=f)
    print("  RVTEST_SIGBASE( x12,signature_x12_1)", file=f)
    for i in range(min(32, loop_num)):
        k = i % 31 + 1
        if k == 8 or k == 16 or k == 24 or k % lmul != 0:
            continue
        n += 1
        print("  TEST_FP_VV_FUSED_OP_rd%d( " % k+str(n)+",  %s.vv, 0xff100, " %
                (instr)+"rd_data_vv+%d, rs2_data+%d, rs1_data+%d);"%(i*step_bytes, i*step_bytes, i*step_bytes), file=f)
        n += 1
        print("  TEST_FP_VV_FUSED_OP_1%d( " % k+str(n)+",  %s.vv, 0xff100, " %
                (instr)+"rd_data_vv+%d, rs2_data+%d, rs1_data+%d);"%(i*step_bytes, i*step_bytes, i*step_bytes), file=f)
    
    vv_test_num = n
    # VF
    print("  #-------------------------------------------------------------", file=f)
    print("  # VF Tests", file=f)
    print("  #-------------------------------------------------------------", file=f)
    print("  RVTEST_SIGBASE( x20,signature_x20_1)", file=f)
    for i in range(loop_num):
        n += 1
        print("TEST_FP_VF_FUSED_OP_RV( %d,  %s.vf, 0xff100, rd_data_vf+%d, rs2_data+%d, rs1_data+%d);"  % (
            n, instr, i*step_bytes, i*step_bytes, i*step_bytes), file=f)
    vf_test_num = n - vv_test_num
    return (vv_test_num, vf_test_num, 0)

def generate_tests_vfwmacc(instr, f, vsew, lmul):
    vlen = int(os.environ['RVV_ATG_VLEN'])
    vsew = int(os.environ['RVV_ATG_VSEW'])
    global rs1_val, rs2_val, rs1_val_64, rs2_val_64
    if vsew == 64:
        rs1_val = rs1_val_64
        rs2_val = rs2_val_64
    rs1_val = list(set(rs1_val))
    rs2_val = list(set(rs2_val))
    lmul_1 = 1 if lmul < 1 else int(lmul)
    n = 0
    num_elem = int((vlen * lmul / vsew))
    if num_elem == 0:
        return (0,0,0)
    loop_num = int(min(len(rs1_val), len(rs2_val)) / num_elem)
    step_bytes = int(vlen * lmul / 8)
    step_bytes_double = step_bytes * 2
 
    # VV
    print("  #-------------------------------------------------------------", file=f)
    print("  # VV Tests", file=f)
    print("  #-------------------------------------------------------------", file=f)
    print("  RVTEST_SIGBASE( x12,signature_x12_1)", file=f)
    for i in range(loop_num):
        n += 1
        print("TEST_FP_W_VV_FUSED_OP( %d,  %s.vv, 0xff100,  rd_data_vv+%d, rs2_data+%d, rs1_data+%d);" % (
            n, instr, i*step_bytes_double, i*step_bytes, i*step_bytes), file=f)

    print("  #-------------------------------------------------------------", file=f)
    print("  # VV Tests (different register)", file=f)
    print("  #-------------------------------------------------------------", file=f)
    print("  RVTEST_SIGBASE( x12,signature_x12_1)", file=f)
    for i in range(min(32, loop_num)):
        k = i % 31 + 1
        if not (k == 8 or k == 16 or k == 24 or k % (2*lmul) != 0):
            n += 1
            print("  TEST_FP_W_VV_FUSED_OP_rd%d( " % k+str(n)+",  %s.vv, 0xff100, " %
                    (instr)+"rd_data_vv+%d, rs2_data+%d, rs1_data+%d);"%(i*step_bytes_double, i*step_bytes, i*step_bytes), file=f)
        if not (k == 8 or k == 16 or k == 24 or k % lmul != 0):
            n += 1
            print("  TEST_FP_W_VV_FUSED_OP_1%d( " % k+str(n)+",  %s.vv, 0xff100, " %
                    (instr)+"rd_data_vv+%d, rs2_data+%d, rs1_data+%d);"%(i*step_bytes_double, i*step_bytes, i*step_bytes), file=f)
    
    vv_test_num = n
    # VF
    print("  #-------------------------------------------------------------", file=f)
    print("  # VF Tests", file=f)
    print("  #-------------------------------------------------------------", file=f)
    print("  RVTEST_SIGBASE( x20,signature_x20_1)", file=f)
    for i in range(loop_num):
        n += 1
        print("TEST_FP_W_VF_FUSED_OP_RV( %d,  %s.vf, 0xff100, rd_data_vf+%d, rs2_data+%d, rs1_data+%d);"  % (
            n, instr, i*step_bytes_double, i*step_bytes, i*step_bytes), file=f)
    vf_test_num = n - vv_test_num
    return (vv_test_num, vf_test_num, 0)

def generate_tests_vfred(instr, f, vsew, lmul, suffix="vf", test_vv=True, test_vf=True, test_rv=False):
    # lmul = 1 if lmul < 1 else int(lmul)

    global rs1_val, rs2_val, rs1_val_64, rs2_val_64
    if vsew == 64:
        rs1_val = rs1_val_64
        rs2_val = rs2_val_64

    if instr == "vfdiv" or instr == "vfrdiv" or instr == "vfrec7":
        # For the divison instruction, the operands cannot be zero
        # So we need to delete it
        while (rs1_val.count("0x00000000")):
            rs1_val.remove("0x00000000")
        while (rs2_val.count("0x00000000")):
            rs2_val.remove("0x00000000")

        # `0x80000000` is represented as `-0` in floating point
        # So we need to delete it
        while (rs1_val.count("0x80000000")):
            rs1_val.remove("0x80000000")
        while (rs2_val.count("0x80000000")):
            rs2_val.remove("0x80000000")

        # For the divison instruction, the operands cannot be zero
        # So we need to delete it
        while (rs1_val.count("0x0000000000000000")):
            rs1_val.remove("0x0000000000000000")
        while (rs2_val.count("0x0000000000000000")):
            rs2_val.remove("0x0000000000000000")

        # `0x8000000000000000` is represented as `-0` in floating point
        # So we need to delete it
        while (rs1_val.count("0x8000000000000000")):
            rs1_val.remove("0x8000000000000000")
        while (rs2_val.count("0x8000000000000000")):
            rs2_val.remove("0x8000000000000000")

    n = 1
    if test_vv:
        print("  #-------------------------------------------------------------", file=f)
        print("  # VV Tests", file=f)
        print("  #-------------------------------------------------------------", file=f)
        print("  RVTEST_SIGBASE( x12,signature_x12_1)", file=f)
        for i in range(len(rs1_val) - 1):
            print("TEST_FPRED_VV_OP( %d,  %s.%s, 0xff100,               5201314,        %s,        %s );" % (
                n, instr, suffix, rs1_val[i], rs2_val[i]), file=f)
            n += 1

        print("  #-------------------------------------------------------------", file=f)
        print("  # VV Tests (different register)", file=f)
        print("  #-------------------------------------------------------------", file=f)
        print("  RVTEST_SIGBASE( x12,signature_x12_1)", file=f)

        for i in range(len(rs1_val) - 1):
            k = i % 31 + 1
            if k == 8 or k == 16 or k == 24 or k % lmul != 0:
                continue
            print("  TEST_FPRED_VV_OP_rd%d( " % k+str(n)+",  %s.%s, 0xff100, " %
                  (instr, suffix)+"5201314"+", "+rs1_val[i]+", "+rs2_val[i]+" );", file=f)
            n += 1
            print("  TEST_FPRED_VV_OP_1%d( " % k+str(n)+",  %s.%s, 0xff100, " %
                  (instr, suffix)+"5201314"+", "+rs1_val[i]+", "+rs2_val[i]+" );", file=f)
            n += 1

    if test_vf:
        print("  #-------------------------------------------------------------", file=f)
        print("  # VF Tests", file=f)
        print("  #-------------------------------------------------------------", file=f)
        print("  RVTEST_SIGBASE( x20,signature_x20_1)", file=f)
        for i in range(len(rs1_val) - 1):
            print("TEST_FPRED_VF_OP( %d,  %s.vf, 0xff100,               5201314,        %s,        %s );" % (
                n, instr, rs1_val[i], rs2_val[i]), file=f)
            n += 1

        print("  #-------------------------------------------------------------",file=f)
        print("  # VF Tests (different register)",file=f)
        print("  #-------------------------------------------------------------",file=f)
        print("  RVTEST_SIGBASE( x20,signature_x20_1)",file=f)
        n = n+1
        for i in range(len(rs1_val) - 1):     
            k = i%31+1        
            if k == 1 or k == 8 or k == 16 or k == 24 or k % lmul != 0:
                continue  
            print("  TEST_FPRED_VF_OP_rd_%d( "%k+str(n)+",  %s.vf, 0xff100, "%instr+"5201314"+", "+rs1_val[i]+", "+rs2_val[i]+" );",file=f)
            n+=1
            
            k = i%31+1
            if k == 2 or k % lmul != 0:
                continue        
            print("  TEST_FPRED_VF_OP_rs1_%d( "%k+str(n)+",  %s.vf, 0xff100, "%instr+"5201314"+", "+rs1_val[i]+", "+rs2_val[i]+" );",file=f)
            n +=1



def generate_tests_widen(instr, f, vsew, lmul,  test_wvwf = False):
    vlen = int(os.environ['RVV_ATG_VLEN'])
    vsew = int(os.environ['RVV_ATG_VSEW'])
    global rs1_val, rs2_val, rs1_val_64, rs2_val_64
    if vsew == 64:
        rs1_val = rs1_val_64
        rs2_val = rs2_val_64
    rs1_val = list(set(rs1_val))
    rs2_val = list(set(rs2_val))
    lmul_1 = 1 if lmul < 1 else int(lmul)
    n = 0
    num_elem = int((vlen * lmul / vsew))
    if num_elem == 0:
        return (0,0,0)
    loop_num = int(min(len(rs1_val), len(rs2_val)) / num_elem)
    step_bytes = int(vlen * lmul / 8)
    step_bytes_double = step_bytes * 2

    print("  #-------------------------------------------------------------",file=f)
    print("  # VV Tests",file=f)
    print("  #-------------------------------------------------------------",file=f)
    print("  RVTEST_SIGBASE( x12,signature_x12_1)",file=f)
    for i in range(loop_num):
        n += 1
        print("  TEST_W_FP_VV_OP( "+str(n)+",  %s.vv,  "%instr+"0xff100, "+"rd_data_vv+%d, rs2_data+%d, rs1_data+%d)"%(i*step_bytes_double, i*step_bytes, i*step_bytes),file=f)
    
    print("  #-------------------------------------------------------------",file=f)
    print("  # %s Tests (different register)"%instr,file=f)
    print("  #-------------------------------------------------------------",file=f)
    print("  RVTEST_SIGBASE( x12,signature_x12_1)",file=f)
    for i in range(min( 32, loop_num)):
        k = i % 31 + 1
        if k % lmul == 0:
            n += 1
            print("  TEST_W_FP_VV_OP_1%d( "%k + str(n) + ",  %s.vv, "%instr + "0xff100, rd_data_vv+%d, rs2_data+%d, rs1_data+%d)"%(i*step_bytes_double, i*step_bytes, i*step_bytes), file=f)

        if k % (2*lmul) == 0:
            n += 1
            print("  TEST_W_FP_VV_OP_rd%d( "%k + str(n)+ ",  %s.vv, "%instr + "0xff100, rd_data_vv+%d, rs2_data+%d, rs1_data+%d)"%(i*step_bytes_double, i*step_bytes, i*step_bytes), file=f)
    vv_test_num = n

    print("  #-------------------------------------------------------------",file=f)
    print("  # VF Tests",file=f)
    print("  #-------------------------------------------------------------",file=f)
    print("  RVTEST_SIGBASE( x20,signature_x20_0)",file=f)
    for i in range(loop_num):
        n += 1
        print("  TEST_W_FP_VF_OP( "+str(n)+",  %s.vf, "%instr+"0xff100, "+"rd_data_vf+%d, rs2_data+%d, rs1_data+%d)"%(i*step_bytes_double, i*step_bytes, i*step_bytes),file=f)
    vf_test_num = n - vv_test_num

    wv_test_num = 0
    wf_test_num = 0
    if test_wvwf:
        print("  #-------------------------------------------------------------",file=f)
        print("  # WV Tests",file=f)
        print("  #-------------------------------------------------------------",file=f)
        print("  RVTEST_SIGBASE( x20,signature_x20_0)",file=f)
        for i in range(loop_num):
            n += 1
            print("  TEST_W_FP_WV_OP( "+str(n)+",  %s.wv, "%instr+"0xff100, "+"rd_data_wv+%d, rs2_data_widen+%d, rs1_data+%d)"%(i*step_bytes_double, i*step_bytes_double, i*step_bytes),file=f)
        wv_test_num = n - vf_test_num - vv_test_num

        print("  #-------------------------------------------------------------",file=f)
        print("  # WF Tests",file=f)
        print("  #-------------------------------------------------------------",file=f)
        print("  RVTEST_SIGBASE( x20,signature_x20_0)",file=f)
        for i in range(loop_num):
            n += 1
            print("  TEST_W_FP_WF_OP( "+str(n)+",  %s.wf, "%instr+"0xff100, "+"rd_data_wf+%d, rs2_data_widen+%d, rs1_data+%d)"%(i*step_bytes_double, i*step_bytes_double, i*step_bytes),file=f)
        wf_test_num = n - vf_test_num - vv_test_num - wv_test_num
    return (vv_test_num, vf_test_num, wv_test_num, wf_test_num)

def generate_tests_vvmvfm(instr, f, lmul, test_vv=True):
    vlen = int(os.environ['RVV_ATG_VLEN'])
    vsew = int(os.environ['RVV_ATG_VSEW'])
    global rs1_val, rs2_val, rs1_val_64, rs2_val_64
    if vsew == 64:
        rs1_val = rs1_val_64
        rs2_val = rs2_val_64
    rs1_val = list(set(rs1_val))
    rs2_val = list(set(rs2_val))
    lmul_1 = 1 if lmul < 1 else int(lmul)
    n = 0
    num_elem = int((vlen * lmul / vsew))
    if num_elem == 0:
        return (0,0,0)
    loop_num = int(min(len(rs1_val), len(rs2_val)) / num_elem)
    step_bytes = int(vlen * lmul / 8)
    # Generate vv
    if test_vv:
        print("  #-------------------------------------------------------------", file=f)
        print("  # VV Tests", file=f)
        print("  #-------------------------------------------------------------", file=f)
        print("  RVTEST_SIGBASE( x12,signature_x12_1)", file=f)
        for i in range(loop_num):
            n += 1
            print("  TEST_VVM_OP( "+str(n)+",  %s.vv, " %
                instr+"5201314, 0xff100, rs2_data+%d, rs1_data+%d)"%(i*step_bytes, i*step_bytes), file=f)
        for i in range(min(32, loop_num)): 
            k = i%31+1
            if k == 0 or k == 8 or k == 16 or k == 24 or k % (lmul * 2) != 0:
                continue
            n+=1
            print("  TEST_VVM_OP_rd%d( "%k+str(n)+",  %s.vv, "%instr+"5201314, 0xff100, rs2_data+%d, rs1_data+%d)"%(i*step_bytes, i*step_bytes),file=f)
            
            k = i%30+2
            if k == 0 or k == 8 or k == 16 or k == 24 or k % lmul != 0:
                continue
            n +=1
            print("  TEST_VVM_OP_1%d( "%k+str(n)+",  %s.vv, "%instr+"5201314, 0xff100, rs2_data+%d, rs1_data+%d)"%(i*step_bytes, i*step_bytes),file=f)
    vv_test_num = n

    # test vf
    print("  #-------------------------------------------------------------", file=f)
    print("  # VF Tests", file=f)
    print("  #-------------------------------------------------------------", file=f)
    print("  RVTEST_SIGBASE( x20,signature_x20_1)", file=f)
    for i in range(loop_num):
        n += 1
        print("  TEST_VXM_OP( "+str(n)+",  %s.vf, " %
            instr+"5201314, 0xff100, rs2_data+%d, rs1_data+%d)"%(i*step_bytes, i*step_bytes), file=f)
    for i in range(min(32, loop_num)):
        k = i%31+1
        if k == 0 or k == 24 or k % (lmul * 2) != 0:
            continue
        n+=1
        print("  TEST_VXM_OP_rd%d( "%k+str(n)+",  %s.vf, "%instr+"5201314, 0xff100, rs2_data+%d, rs1_data+%d)"%(i*step_bytes, i*step_bytes),file=f)
        
        k = i%30+2
        if k == 0 or k == 8 or k == 16 or k == 24 or k % (lmul * 2) != 0:
            continue
        n +=1
        print("  TEST_VXM_OP_1%d( "%k+str(n)+",  %s.vf, "%instr+"5201314, 0xff100, rs2_data+%d, rs1_data+%d)"%(i*step_bytes, i*step_bytes),file=f)

    vx_test_num = n - vv_test_num
    
    return (vv_test_num, vx_test_num, 0)
    
